Overview

ScotAccount currently provides two distinct capabilities, namely: 
1 - Authentication
2 - Provision of verified attributes (including a verified identity to gpg45 medium) 
ScotAccount allows RPs/SCs to run one or more OIDC code flows to authenticate a user and then request data as the user goes through the RP's user journey. RPs must run an OIDC code flow to authenticate the user first before running any other flow/s to request data. Data can only be provided when end users are present and give their permission. 
These capabilities are provided to Relying Parties/Service Customers (RPs/SCs) using OIDC (Open ID Connect) - auth code flows with PKCE (Proof Key Code Exchange).  If the openid scope is provided on its own then the user will be authenticated. If an RP wants to request any verified attribute/s, they must first run an OIDC flow to authenticate the user and check whether they know them and/ or still require attribute/s.  
If they do require any attribute/s, they should then run another flow with the relevant attribute scope/s as well as openid. ScotAccount will return the verified attribute/s if it is able to. 
The table below details the scopes and the verified attributes that can be requested. 
Capability 
Scope
Verification Method
Description
Authentication
openid 
gpg44 medium
OIDC authorisation requests must contain the openid scope value to indicate that an application intends to use the OIDC protocol.
The ID token obtained at the end of this flow has a Sub field which is a UUID which is unique and persistent and identifies a user. i.e. every time the same user logs on, an id token with the same Sub will be produced.
Verified Attributes: identity 
 
scotaccount.gpg45.medium
gpg45 medium
 
This scope provides the outcome of the identity verification process. This can either be “verified” with the identity attribute consisting of a name and DOB bound to the Sub (UUID) or “unverified” where the user has completed but not been verified through the gpg45 process. Further details are provided in the 
ScotAccount data schema below:
{
    "$defs": {
        "issType": {
            "type": "string",
            "format": "uri",
            "description": "The issuer of the JWT"
        },
        "subType": {
            "type": "string",
            "description": "The subject of the JWT"
        },
        "iatType": {
            "type": "integer",
            "description": "The issued at time of the JWT"
        },
        "addressType": {
            "type": "object",
            "properties": {
                "uprn": {
                    "type": "string",
                    "pattern": "^[0-9]+$",
                    "maxLength": 12,
                    "description": "Unique Property Reference Number"
                },
                "organisationName": {
                    "type": "string",
                    "maxLength": 60,
                    "description": "Organisation Name"
                },
                "departmentName": {
                    "type": "string",
                    "maxLength": 60,
                    "description": "Department Name"
                },
                "subBuildingName": {
                    "type": "string",
                    "maxLength": 60,
                    "description": "Sub-Building Name"
                },
                "buildingNumber": {
                    "type": "string",
                    "pattern": "^[0-9]+$",
                    "maxLength": 4,
                    "description": "Building Number"
                },
                "buildingName": {
                    "type": "string",
                    "maxLength": 50,
                    "description": "Building Name"
                },
                "dependentStreetName": {
                    "type": "string",
                    "maxLength": 80,
                    "description": "Dependent Street Name"
                },
                "streetName": {
                    "type": "string",
                    "maxLength": 80,
                    "description": "Street Name"
                },
                "doubleDependentAddressLocality": {
                    "type": "string",
                    "maxLength": 35,
                    "description": "Double Dependent Address Locality"
                },
                "dependentAddressLocality": {
                    "type": "string",
                    "maxLength": 35,
                    "description": "Dependent Address Locality"
                },
                "addressLocality": {
                    "type": "string",
                    "maxLength": 30,
                    "description": "Address Locality"
                },
                "postalCode": {
                    "type": "string",
                    "maxLength": 8,
                    "description": "Postal Code"
                }
            }
        },
        "verificationType": {
            "type": "object",
            "properties": {
                "outcome": {
                    "type": "string",
                    "enum": [
                        "VERIFIED_SUCCESSFULLY",
                        "VERIFIED_WITH_WARNINGS",
                        "VERIFICATION_FAILED"
                    ],
                    "description": "Outcome of the verification process"
                },
                "trust_framework": {
                    "type": "string",
                    "enum": [
                        "uk_tfida"
                    ],
                    "description": "Identifier for the trust framework"
                },
                "assurance_policy": {
                    "type": "string",
                    "enum": [
                        "GPG_45",
                        "other_possible_values"
                    ],
                    "description": "The assurance policy used through the verification process."
                },
                "confidence_level": {
                    "type": "string",
                    "enum": [
                        "low",
                        "medium",
                        "high",
                        "very_high"
                    ],
                    "description": "The confidence level as described in good practice guide 45."
                },
                "validation_method": {
                    "type": "string",
                    "enum": [
                        "credit_reference_agency",
                        "email_loop",
                        "self_certified"
                    ],
                    "descriptions": {
                        "credit_reference_agency": "Validation using credit reference agency",
                        "email_loop": "Validation via email loop process",
                        "self_certified": "Validation via self certification"
                    }
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time at which the claims were verified"
                },
                "verifier": {
                    "type": "object",
                    "properties": {
                        "organization": {
                            "type": "string",
                            "maxLength": 60,
                            "description": "Name of the organization that verified the claims"
                        },
                        "txn": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Transaction ID of the verification process"
                        }
                    },
                    "required": [
                        "organization",
                        "txn"
                    ]
                }
            },
            "required": [
                "outcome",
                "trust_framework",
                "time",
                "verifier"
            ]
        },
        "emailType": {
            "type": "string",
            "format": "email",
            "description": "End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax"
        },
        "givenNameType": {
            "type": "string",
            "description": "The given name of the end user."
        },
        "familyNameType": {
            "type": "string",
            "description": "The family name of the end user."
        },
        "birthDateType": {
            "type": "string",
            "format": "date",
            "description": "The birth date of the end user in YYYY-MM-DD format."
        },
        "scopeType": {
            "type": "string",
            "enum": [
                "scotaccount.address",
                "scotaccount.gpg45.medium",
                "scotaccount.email"
            ],
            "description": "The scope of verified claims. Each scope returns a well defines set of claims."
        },
        "addressClaimsType": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/$defs/addressType"
                }
            },
            "required": [
                "address"
            ]
        },
        "emailClaimsType": {
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/$defs/emailType"
                }
            },
            "required": [
                "email"
            ]
        },
        "gpg45MediumClaimsType": {
            "type": "object",
            "properties": {
                "given_name": {
                    "$ref": "#/$defs/givenNameType"
                },
                "family_name": {
                    "$ref": "#/$defs/familyNameType"
                },
                "birth_date": {
                    "$ref": "#/$defs/birthDateType"
                }
            },
            "required": [
                "given_name",
                "family_name",
                "birth_date"
            ]
        }
    },
    "$id": "https://schema.scotaccount.service.gov.scot/external/v2/scotaccount-verified-claims",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "scotaccount.verified.claims",
    "type": "object",
    "properties": {
        "iss": {
            "$ref": "#/$defs/issType"
        },
        "sub": {
            "$ref": "#/$defs/subType"
        },
        "iat": {
            "$ref": "#/$defs/iatType"
        },
        "verified_claims": {
            "type": "array",
            "items": {
                "scope": {
                    "$ref": "#/$defs/scopeType"
                },
                "verification": {
                    "$ref": "#/$defs/verificationType"
                },
                "claims": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/addressClaimsType"
                        },
                        {
                            "$ref": "#/$defs/emailClaimsType"
                        },
                        {
                            "$ref": "#/$defs/gpg45MediumClaimsType"
                        }
                    ]
                }
            },
            "required": [
                "scope",
                "verification"
            ]
        }
    },
    "required": [
        "iss",
        "sub",
        "iat",
        "verified_claims"
    ]
}



Verified Attributes: address
 
scotaccount.address
Claimed address checked against credit reference records. 
This scope provides a verified address. Further details are provided in the 
ScotAccount data schema .
 
Verified Attributes: scotaccount.email
 
scotaccount.email
Verified by ScotAccount at sign up/ account creation. 
This scope provides a verified email address. Further details are provided in the 
ScotAccount data schema .


 Step 3 - JWKS_URI

The jwks_uri endpoint provides an interface to see our public key, which we use for signing of JWt’s.
It contains the following information [ “kty” , “e” , “use” , “kid” , “n” ]
Keys will be rotated periodically, and the current and old keys will be kept available. The most resent key will always be the first one available in the json structure.
Day 1
{"keys":[{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}
Day 2
{"keys":[
{"kty":"RSA","e":"AQAB","use":"sig","kid":"XsXX","n":"456"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}
Day 3
{"keys":[
{"kty":"RSA","e":"AQAB","use":"sig","kid":"ZZ12","n":"789"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"XsXX","n":"456"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}
"kty": Key Type - Indicates that it's an RSA key.
"e": Public Exponent - The exponent used for RSA encryption/decryption.
"use": Key Use - Indicates that the key is used for signature verification.
"kid": Key ID - A unique identifier for the key.
"n": Modulus - Part of the RSA public key.
ScotAccount recommends that the relying party calls the JWKS prior commencing each OIDC flow. This will ensure the latest ScotAccount public key is available to the relying party. ScotAccount routinely and automatically rotates signing keys.
Rotation of keys ensures that there is always a valid key available for verifying JWT signatures, and older keys are retained for a period to handle JWTs signed with those keys.

NOTE: https://authz.integration.scotaccount.service.gov.scot/jwks.json is for use with our integration environment.
Step 4 - Make a Request for Authentication

To make an authentication request, your application should first send the user to the authorisation URL.
An example of the command is detailed below.
Authorisation URL Request



GET https://authz.integration.scotaccount.service.gov.scot/authorize?
client_id="YOUR_CLIENT_ID"
&redirect_uri="YOUR_REDIRECT_URI"
&response_type=code
&scope=openid
&code_challenge_method=S256
&code_challenge="YOUR_CODE_CHALLENGE"
&state="YOUR_STATE"
&nonce="YOUR_NONCE"

Our Authentication flow is valid for 7 days. This means you will need to persist the &state parameter for up to 7 days.
Parameters - Request for Authentication

Replace the placeholder values or “YOUR_*” from the above request with your specifics and follow the guidance provided.
Parameter
Type
Description
client_id
Required
You will have been be issued your client_ID during onboarding with ScotAccount.
redirect_uri
Required
You’ll have specified one or moreredirect_uri during onboarding with ScotAccount.
The redirect URI parameter must exactly match one of the redirect URIs you specified, except that it must be URL-encoded.
URI to which the authorisation server will redirect the user after authentication and authorisation.
response_type
Required
You must set this value to be code: response_type=code.
scope
Required
openid
code_challenge_method
Required
This value indicates which encryption algorithm has been used to generate the code_challenge. ScotAccount only support SHA-256 therefore this value must be set to S256.
code_challenge
Required
We mandate the use of Proof Key for Code Exchange (PKCE) and this parameter is your code_challenge that is generated from your code_verifier by your OIDC client library.
OAuth have a very good explanation of the PKCE protocol here on their website.
state
Required
When you receive a response at the redirect URL, there must be a way to verify the response came for a request which you sent. The state value solves this issue by binding the request and response, which reduces impact of Cross Site Request Forgery attacks.
This value will be returned to the client in the authentication response. As DIS allows OIDC flows to last up to 7 days
nonce
Required
A unique value generated by your application that is used to verify the integrity of the id_token and mitigate replay attacks
Response - Request for Authentication




HTTP/1.1 302 Found
Location: https://YOUR_REDIRECT_URI?code=YOUR_CODE&state=xyzABC123
Errors - Request for Authentication

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.
If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:



HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"     
}
The table below has information on the error types you may encounter. These include the oauth standard errors. 
Http Code
Error Code
Error Description
302
account_selection_required
Account sign-up was cancelled
302
access_denied
See oauth standard errors.
302
invalid_dis_prompt
Invalid dis_prompt: found more than one: *List of invalid prompts*
302
invalid_dis_prompt
Invalid dis_prompt: *Invalid prompt*
302
invalid_request
Required PKCE method(s): [plain, S256]
302
invalid_request
Invalid Request: Missing state parameter
302
invalid_request
Invalid request: Missing response_type parameter
302
invalid_request
Invalid request: Missing redirect_uri parameter
302
invalid_request
Invalid request: Invalid claims parameter: Invalid JSON
302
invalid_request
Invalid request: Invalid claims parameter: Unexpected type of JSON object member with key *Invalid json key*
302
unsupported_response_type
Unsupported response type
302
unsupported_response_type
Unsupported response type *Unsupported response type*
302
invalid_scope
Invalid scope: missing scope openid
302
invalid_scope
Invalid scope: *Invalid scope*
302
invalid_claims
Invalid claims: invalid parameter format
302
invalid_claims
Invalid claims: *List of invalid claims*
Step 5 - Redirect

The Relying Party’s web application issues a 302 http redirect with the necessary authentication request and parameters needed.
Step 6 - Authentication Request

The User Agent executes the request from Step 3.
Step 7 - User Authentication

ScotAccount provides a series of screens for authentication to happen
Step 8 - Store the auth_code challenge and method

ScotAccount stores auth_code challenge and method
Step 9 - Redirect with REDIRECT_URI

The Relying Party's web application issues a http redirect using the REDIRECT_URI.
This is part of the callback mechanism used after successful authentication in the OIDC Flow.
Step 10 - Send auth_code to RP

A auth_code is generated after a successful OIDC Flow and returned back as a query parameter on the redirect in this step.
Step 11 - Make a Request for Token

 
To make a request to the token endpoint, the relying party’s application needs to exchange your authorisation code for tokens, you’ll need to make a POST request to the /token endpoint using the private_key_jwt client assertion authentication method.
Request - Request for Token
The request for token should look like:



POST https://authz.integration.scotaccount.service.gov.scot/token?grant_type=authorization_code&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&code=YOUR_CODE&client_assertion=YOUR_CLIENT_ASSERTION&redirect_uri=YOUR_REDIRECT_URI&code_verifier=YOUR_CODE_VERIFIER
Where “YOUR_CODE”   “YOUR_CLIENT_ASSERTION”  “YOUR_REDIRECT_URI” and “YOUR_CODE_VERIFIER”  are replaced with your values.
Example of the body of Client Assertion

Below is as an example of client assertion. It needs to be signed with your private_jwt_key.



{
    "iss": "Your client ID",
    "sub": "Your client ID",
    "aud": "This is the endpoint you are sending this assertion to. I.e https://authz.integration.scotaccount.service.gov.scot/token or https://issuer.main.integration.scotaccount.service.gov.scot/attributes/values",
    "exp": 1647949460384, //Unix timestamp with expiry of the assertion. As long as not expired anything can go in there
    "jti": "aa78f001-69d2-4142-9a43-d88ac4f6d050" //unique id for token, should be unique for each request
 }
Parameters - Request for Token

Please replace “YOUR_*”, from the above request, with the specific Relying Party values, following the advice/information provided below.
Parameter
Type
Description
client_assertion_type
Required
Format - "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
code
Required
This information is provided in the previous step
grant_type
Required
Format - "authorization_code"
redirect_uri
Required
You’ll have specified one or moreredirect_uri during onboarding to ScotAccount.
The redirect URI parameter must exactly match one of the redirect URIs you specified, except that it must be URL-encoded.
client_assertion
Required
See above the example of client assertion
code_verifier
Required
As part of the PKCE process, the OP will return a "code_verifier" , as part of the authorization process, that will need to be stored, and sent back to the /token endpoint.
This is a security feature to stop MITM - Man in the Middle Attacks.
Response where scope is openid




{
  "access_token": "eyJraWQiOiJXZ2lHIiwidHlwIjoiYXQrand0IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0ZjY4OTNmNC02ZmJlLTQyM2UtYTVjYy1kM2M5M2U1YTdjNDEiLCJzY3AiOlsib3BlbmlkIl0sImlzcyI6Imh0dHBzOi8vYXV0aHouc3dhbi5zaWduLWluLnNlcnZpY2UuZ292LnNjb3QiLCJleHAiOjE2Nzg5MzI2NjIsImlhdCI6MTY3ODkzMTc2MiwianRpIjoiekY4Q1VQRC10ZVkiLCJjaWQiOiI1eWh5Z2tzY3R3cHFnIn0.LiE0ocHRkXNINwwxol4XrKqYMuafZ2-gSP1S2huPam-anV9uxMxvbm7W6pvWe8n2mOUsxFDQVNgVP8OuoFuMj-nhWvm5ZornnACmHS1g0MkECOabQmnYrmqcWJesYvrlMRccrie20ZM34_wALQYL2xgtKNBBaUaD6rTmjiKU3TGgX2q7b71A72YqA9stxQjBocjjWcJuXHrbt_qmyuiS2SVniRvmOXnukpiGPLIBZshJGm3SpZiAknfrlo7EQCQUru9NHuj9DYf1wxoRYzZh8nYLXvAm7lzxkVvH1AhhHoj2TAF6YXvMOZPRC7PSrc9hOxYz3xJkOZnQmfyucyh8-Q",
  "refresh_token": "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..vnC6Aa6eIzxwHxP1eIk2rA.4or8EM0wJZfj0-w3YfjK-pz97Iysa57njT7UDuGJKa3TkFxgs1sCws9zWfYjuEK7KU_j8spLc50ngaSGQaqq23z2T-suL-B0JC949Exl_-48zPEBiQCqsBEKo338973xMm7_Arvp86aQQDQ7i5KTSd05vXqA7YCW7WCEgIG1k93JPsY0pp70NSBqPP-wpCu914yPkXTvQlte5TbyoVpH89mafQg4oyfvzQT2NBtMOC_LoeOImSOKuD0dLCNmgrsXn5CrcXLfquk8bTR283G2qE9AguphWGjm3hWIqVhXuCgZo7AsBkPxbsnt0oIQ7UuD3ZH_n7qRagiC9rOuBdYgmNaYfAYRtpEujVXB8GnwMniSgn0iyB8-tf-x3Gs8ihQe8x-dwOXwMMrXXrM11Wnevh2ZOr8TQoh4f_JHXmy7OdvcqaRTa2JzEre9gy1vSevkK6lPbCV1IeD1oIPkJk3A7FKNrWlVS5w0uJa1KaItVrQtrFrhgMHwGIqkVcWNQ-ZEnvRCRqoFzt812m6jUHchpxlFHFiiQ58kfIl6UyH9_vc8pSONMxQbgoBJftLKR0JqxHU3pTpmIjPupLxMl3YMDIdLGPmemK8pmPbHB9zvCq4eR7HiiYsb5JweBxOUaPlNCdkjj1MT30q56tldEoila_mk5V75Dj3U5EhqpRlyFYTLSzPHRjBnjlrGTb8FqZ6zSNC8JZ_U4q2LWkJge4RT2riOIC1yLmfy2K1NflNKi99P5CGzuzmavX3Yv9usqK_3CKnTPOAbtIR9lJO4eBz6uxsaB7JTp_ASxhG96OIkuupph4OvLuPVX8vX6f0i05Ay5Xa0b2-7WBR-i9m7VjUoFUCH4m2HwSzp30oOmQw_n0nT7tM_1_mXDd95StbKavkb9Yjdzg6BVA5Ux9eKU-WrF05rB9YLT5u1E4M3cNA7XCpvR935O1Hty-Z7_U58MGG2SPYKlquTjtHPV4v7Kb3M_Astr8OzDiR3Rw4q59Xd8Ak.Y4pYS8iU7Jft6ay6yywpig",
  "scope": "openid",
  "id_token": "eyJraWQiOiJXZ2lHIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0ZjY4OTNmNC02ZmJlLTQyM2UtYTVjYy1kM2M5M2U1YTdjNDEiLCJhdWQiOiI1eWh5Z2tzY3R3cHFnIiwiaXNzIjoiaHR0cHM6Ly9hdXRoei5zd2FuLnNpZ24taW4uc2VydmljZS5nb3Yuc2NvdCIsImV4cCI6MTY3ODkzMjY2MiwiaWF0IjoxNjc4OTMxNzYyLCJub25jZSI6IkJkSExEV1BSbVk4V0JZTjZCRXRGZkkyUlZvSm15Q1JwcEdGSXQyaEd5N0EiLCJqdGkiOiJmUF9XXzJ3NjVpVSIsInNpZCI6Inl4WjJWcE9ueWRWMENUOGoxU2JsZnp0UllEcmtxLVNKM09IN2VqRjdHUWcifQ.db79iKccqKkXF4MF2IThOV05AZHrlvmNZWAW5ojUzyQoKzHSlPtCEeC3sqwsah84gHMqU0A9ACWPbE8SECdpzOvL6QVCfoWjwuiMEzMsOZvCHccMEpeNX8rbB7_L5Mo5lLOpVl80jIezKNQJ8NMQoOgMGaBm5qkgLTVFuYqVnvpzAEb44xDeSYe7__jaXOUBiGIWMqopeqJRmR1cy5yJ9ShqDa_xoBVmAxXXXv0ZOanE7E7-LCBApdvFNRA-JUUrjMIYUNn8cSkupye6bjLElLT_qPKJc6N0mSOhH43oU5GB-heMhNX18p-07J5pFFAHotcP6VsA2mE7y96gLQ1XrA",
  "token_type": "Bearer",
  "expires_in": 900
}
Errors - Request for Token

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.
If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:



HTTP/1.1 501 Bad Request
Content-Type: application/json
{
  "error": "internal_server_error"
  "error_description": "Technical Error"     
}
The table below has information on the error types you may encounter.
401
access_denied
Access_denied: Token not valid
402
N/A
N/A
 
invalid_session_id
Not found: Invalid SID or expired session
403
access_denied
 Access_denied: Token not valid
404
not_found
 Not Found: Page not found
500
internal_server_error
 
501
N/A
N/A
502
bad_gateway
bad_gateway
503
internal_server_error
internal_server_error : Internl Error. Please Retry
 
Step 12 - Verifies auth_code and code_challenger

The token end point verifies that the auth_code and code_challenge are valid
Step 13 - Returns Token

The token end point returns the following information:
id_token
access_token
refresh_token

Our refresh_token is valid for 15 mins
Step 14 - Extract “sub” in ID_Token

The “sub” field can be extracted from the id_token, this is a immutable GUID that is associated with the end user and never changes.
ScotAccount recommends that the relying party verify the signatures of the tokens received using the latest configuration from the Discovery End Point and the JWKS End Point.
ScotAccount also recommends to verify that the ‘nonce’ in ID token is the same as ‘nonce’ provided in original request.

The “sub” field can be used by the Relying Party’s application as a primary/secondary key to identity the end user.
 
For further detail about the responses you will receive, see: 
Understanding Responses - more info 


Make requests for Verified Attributes Flow

Overview - requesting verified attributes.

Verified attributes are requested using OIDC scopes. The current list of verified attributes is shown in the Technical Overview. After a user has been authenticated, you must run a subsequent auth code flow to make requests for verified attributes.  It is important to understand both the technical mechanism to make requests for verified attributes and their underlying business rules (see below), as well as the ScotAccount data schema.
Business rules for verified attributes

Your must first authenticate a user and check (using the UUID) whether you still require any verified attribute/s. You should not request verified attributes that you have previously been provided.
Following that, one or more verified attributes can be requested, as scopes, as part of an auth code flow.
ScotAccount will try its best to provide all of the requested verified attributes, but for various reasons (e.g. data not available, ScotAccount unable to verify the data, user doesn’t give permission, user cancels etc), it may not always be possible. If this is the case, ScotAccount will return as many of the verified attributes as it can. This could be any permutation of those requested, from none to all. The ScotAccount data schema describes the data model for the attributes response. 
The user needs to be present and give their permission before data about them is provided i.e. there is no long-lived access/ refresh tokens for the attribute endpoint. Essentially the tokens are issued ‘per flow’. 
Multiple code flows can be run separately to request multiple verified attributes.  For example, an RP may ask for some verified attributes at the beginning of a user’s application process, but later determine that additional verified attributes are required. RPs must avoid sending repeated requests for the same verified attributes, which could create loops for the user.
The following example uses the ScotAccount.gpg45.medium (ie identity attribute) as illustrative example but any combination of the verified attribute scopes may be requested in one flow. 
Identity attribute Flow

 
Below diagram shows the flow of openid & ScotAccount.gpg45.medium:
Open image-20240501-215513.jpg
image-20240501-215513.jpg
Identity attribute flow

Below is the UML Code for the above flow diagram. One can use Plant UML website to view the code and compile the same if required. PlantUML Web Server
 
Open IDV flow - tech docs (1)

IDV flow - tech docs (1)
30 Aug 2024, 04:17 PM
Step 1 - Browse

The end user browses to the Relying Party's web application.
Step 2 - RP requests verified attribute/s 

The RP requests verified attribute/s.
Step 3 - Well Known Endpoint

A well known endpoint is part of the OIDC protocol and is used as a reference point for configuration information to make sure that both the RP and OP can change information dynamically at runtime.
ScotAccount recommends that the relying party calls the Discovery Endpoint prior commencing each OIDC flow. This will ensure any configuration changes are dynamically applied.

NOTE: https://authz.integration.scotaccount.service.gov.scot/.well-known/openid-configuration is for use with our integration environment.
 Step 4 - JWKS_URI

The jwks_uri endpoint provides an interface to see our public key, which we use for signing of JWt’s.
It contains the following information [ “kty” , “e” , “use” , “kid” , “n” ]
Keys will be rotated periodically, and the current and old keys will be kept available. The most resent key will always be the first one available in the json structure.
Day 1
{"keys":[{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}
Day 2
{"keys":[
{"kty":"RSA","e":"AQAB","use":"sig","kid":"XsXX","n":"456"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}
Day 3
{"keys":[
{"kty":"RSA","e":"AQAB","use":"sig","kid":"ZZ12","n":"789"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"XsXX","n":"456"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}
ScotAccount recommends that the relying party calls the JWKS prior commencing each OIDC flow. This will ensure the latest ScotAccount public key is available to the relying party. ScotAccount routinely and automatically rotates signing keys.

NOTE: https://authz.integration.scotaccount.service.gov.scot/jwks.json is for use with our integration environment.
Step 5 - Make a Request for Authentication

 
To make an authentication request, your application should first send the user to the authorisation URL. To send the user to the authorisation URL, run this command below to make a GET request, and follow the guidance in the following table to
Request



GET https://authz.integration.scotaccount.service.gov.scot/authorize?
client_id="YOUR_CLIENT_ID"
&redirect_uri="YOUR_REDIRECT_URI"
&response_type=code
&scope=openid&gpg-45-medium
&code_challenge_method=S256
&code_challenge="YOUR_CODE_CHALLENGE"
&state="YOUR_STATE"
&nonce="YOUR_NONCE"

Our Authentication flow is valid for 7 days.
Parameters - Request for Authentication

Replace the placeholder values or “YOUR_*” from the above request with the Relying Party specifics and follow the guidance provided.
Parameter
Type
Description
client_id
Required
You will have been be issued your client_ID during onboarding with ScotAccount.
redirect_uri
Required
You’ll have specified one or moreredirect_uri during onboarding with ScotAccount.
The redirect URI parameter must exactly match one of the redirect URIs you specified, except that it must be URL-encoded.
response_type
Required
You must set this value to be code: response_type=code.
scope
Required
This value indicates which verified attributes are being requested.
code_challenge_method
Required
This value indicates which encryption algorithm has been used to generate the code_challenge. ScotAccount only support SHA-256 therefore this value must be set to S256.
code_challenge
Required
We mandate the use of Proof Key for Code Exchange (PKCE) and this parameter is your code_challenge that is generated from your code_verifier by your OIDC client library.
OAuth have a very good explanation of the PKCE protocol here on their website.
state
Required
When you receive a response at the redirect URL, there must be a way to verify the response came for a request which you sent. The state value solves this issue by binding the request and response, which reduces impact of Cross Site Request Forgery attacks.
This value will be returned to the client in the authentication response
nonce
Required
A unique value generated by your application that is used to verify the integrity of the id_token and mitigate replay attacks
Response - Request for Authentication




HTTP/1.1 302 Found
Location: https://YOUR_REDIRECT_URI?code=YOUR_CODE&state=xyzABC123
 
Errors - Request for Authentication

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.
If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:



HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"     
}
Step 6 - Redirect

Issue a 302 http redirect with the necessary authorisation request and parameters needed. This will be passed to the User_Agent, so that when authentication happens, a user input will happen.
Step 7 - Authentication Request

ScotAccount provides a series of screens for authentication to happen
Step 8 - User Consents to share verified attribute/s

ScotAccount provides a series of screens for consent and sharing to happen.
Step 9 - Store Verification Challenge

Once Authentication has happened, the code_challenge parameter in the authorisation request (PKCE) is stored, and validated again by the token end point.
This is a security feature.
Step 10 - Redirect

Issue a 302 http redirect with the necessary authorisation request and parameters needed. This will be passed to the User_Agent, so that when authentication happens, a user input will happen.
Step 11 - Send Auth_Code

A auth_code is generation after a successful OIDC Flow and returned back to the End User.
Step 12 - Make a Request for Token

To make a request to the token endpoint, the relying party’s application needs to exchange your authorisation code for tokens, you’ll need to make a POST request to the /token endpoint using the private_key_jwt client assertion authentication method. 
Request - Request for Token




POST https:\/\/authz.integration.scotaccount.service.gov.scot\/token
{
  "client_assertion_type":  "YOUR_CLIENT_ASSERTION_TYPE",
  "code":                   "YOUR_CODE",
  "grant_type":             "authorization_code",
  "redirect_uri":           "YOUR_REDIRECT_URI",
  "client_assertion":       "YOUR_CLIENT_ASSERTION",
  "code_verifier":          "YOUR_CODE_VERIFIER"
}

Our access_token is valid for 15 mins
Parameters - Request for Token

Please replace “YOUR_*”, from the above request, with the specific Relying Party information, following the advice/information provided below.
Parameter
Type
Description
client_assertion_type
Required
Format - "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
code
Required
This information is provided in the previous step
grant_type
Required
Format - "authorization_code"
redirect_uri
Required
You’ll have specified one or moreredirect_uri during onboarding to ScotAccount.
The redirect URI parameter must exactly match one of the redirect URIs you specified, except that it must be URL-encoded.
client_assertion
Required
This is your public key in a jwt format.
code_verifier
Required
As part of the PKCE process, the OP will return a "code_verifier" , as part of the authorization process, that will need to be stored, and sent back to the /token endpoint.
This is a security feature to stop MITM - Man in the Middle Attacks.
Responses - Request for Token

Response where scope is openid&gpg-45-medium




{
  "access_token": "eyJ0eXAiOiJhdCtqd3QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlNIQS0yNTYifQ.eyJzdWIiOiJkMWViNDBmOS0xZDlmLTRlOTItYjJhOC01ZTQwYzgwMGI1ODIiLCJzY3AiOlsiZ2l2ZW5fbmFtZSIsImZhbWlseV9uYW1lIiwiYmlydGhfZGF0ZSIsInVwcm4iLCJvcmdhbmlzYXRpb25OYW1lIiwiZGVwYXJ0bWVudE5hbWUiLCJzdWJCdWlsZGluZ05hbWUiLCJidWlsZGluZ051bWJlciIsImJ1aWxkaW5nTmFtZSIsImRlcGVuZGVudFN0cmVldE5hbWUiLCJzdHJlZXROYW1lIiwiZG91YmxlRGVwZW5kZW50QWRkcmVzc0xvY2FsaXR5IiwiZGVwZW5kZW50QWRkcmVzc0xvY2FsaXR5IiwiYWRkcmVzc0xvY2FsaXR5IiwicG9zdGFsQ29kZSIsImdwZy00NS1tZWRpdW0iLCJvcGVuaWQiXSwiaXNzIjoiaHR0cHM6Ly9hdXRoei5zd2FuLnNpZ24taW4uc2VydmljZS5nb3Yuc2NvdCIsImV4cCI6MTY3MTgwMzMyMiwiaWF0IjoxNjcxODAyNDIyLCJqdGkiOiIwMmJlMjE2MC1kZDNkLTRmMzctOGZmMy03NjI2ODgwNGY4OGUiLCJjaWQiOiJzb21lQ2xpZW50SWQifQ.mXtyLOWRefeE95jlxFbbpXdfvhT40vGnyjmOoiKb-KBS73zUU_hCoDTjN2T5UOSEtCm5lZfEVhQTX1Xfj0SsGLtxHkP4g260O1m9jpuklsUSIpYypq7TStCRy0jzK1-XQCxQGfucSOAM9PfoPUELTgIrerdkk4BGYkt1scD4388lglNEno9m__sSZ2p8OnJEI6F6n7YDTlIMkNgLWvBJGC344Yqn0qW2Jd9_Cly_h_rUtphIVGWRTluIAzNYRnRxbyh_XBV2PueVfypRXZ5IU5BqkMnxtFktyWphlSuULxZ5wQqP4_qd-jSk2gJzBcritmkOB_4crG0Col9V1sZkLQ",
  "refresh_token": "yFUT9LKACgDHZv3QCe0HHPuKZo4ute4UqETyudp5K8RIALHl73OdMVhTTWErj5GY2NADmbvBAmpftA7BaZbcYXlnACPEjlPzDiITiU0Egb3zaIkkgfUzYtZmvzSe89OjdFIp3KfOsQ1vwW6i5nIVJxZI8D0K0ceCi1HjMTTyqdvouMsTXLHxboCV8PQPANDUXFRVGaJT9zAsRcWXPu01fbbK1SyNxdZG0YGxOwSun9vf8nw2F3C6zqvSAsXnf8AAKqMVv9eHG1ApOtJVr33qw4WuGz7VJGtulk3wmv98kjuU7xXXciQsnoDffKf9NX8tIXNX0chKQOueV6SR8EH1QJVdWKdjDoYIMH9WTDUxiYLl3PgZPpiGL7AC0j7h4dJbCBmbsj9rYC0i5RtDt7FVzHjSL0MYnwZgHuZM1BnrDZEBVGV1uPkGTuY6t4HZ9qn0Ft4vmGgrBDPkdafrasc3FluYez6jZP8lxtwIQ9RdbylzcGC73JZioTFjT8gzs6ABCd1B8c25ag3JzGix3NqbSDmJAT1tKriulKW2ayh3HwW8SBEgvltzgGSUwfjwDA1QW0RbtLeloPXLfES0Dgbz7xiTqu3DKQUPFWACq1pI7Bn3GMB5FvHp3vg1kIOxldoGPd5mctVVZ6L0anwQZLQzhhufZrVBXomf9kH3AEPbIVl3okIdXcEJF5kpy7jTAZ5mrtX1gf6Fq6tdXJ2PiMxK7Lhcfg59UZCzpU3KoN32VQrstHiC5uF9xFHu0notip58P0T7hcrOBLjpOePHguk8jeRR4dIgsBXKASia7Dl4TSDYhPMNbvqpG4SYO54xbW5zLjxb7IMXs2aKebtJnq5TuoTubUnInhJUSWvhG6PZgy3t6wB1AFfJwD82yH5VBgr47tokNdlX9e3R9gwkyeeZnq8fIgiaPR1SqvkjEzJRzfFPYHWck9Lbd2xgNK83SDQZCn6338G16kBqa5iH58JcgrsMjvtsKiaLoORRgqqzxWRb7N9dfyVqDRujtghy56al83DhEc9IW70caT3df346QqY9bHOno8R7IeMpu31DJhg4Bh31kVUvA7UUXGL7HSMpVt2jYKNQsG1XXdmYIpCyuP5n9NAgxwmMyT53u7DcnsSoKUezxDwFKiJtnh0W3OpBCvvKHmL9EPEnR3ByODdplGITSOAIkxh9uz2qHWyB8CKwTzLr68wkqcoOPARlBvHTgQ0SowMUxY5iSFEdEqndv8ZcgzXa0i4P5UxqLrLNGMd0qVOmN2Rikdia6EhqVpwW39TBjbX74moZNO1QA1IBQdBebH0ZO0eci7DgRI7dJDmGvlHlKnm4e6CYGSfxRgoGtvN460vputrwISJbIxkFJR6XXdjmHK4ubrwFo1yoBOnm4ehyG0UnEObH8VMUFuUNpp1MC1UUiORmNwCcJZ3thuleI3ZNFjn9fTyx7nb4kXg4sXk8BbZZvqRVv0gsijrrqCK0Gf9B3BYuyRUq0FlYvQoZmsxF",
  "scope": "given_name family_name birth_date uprn organisationName departmentName subBuildingName buildingNumber buildingName dependentStreetName streetName doubleDependentAddressLocality dependentAddressLocality addressLocality postalCode gpg-45-medium openid",
  "id_token": "eyJ0eXAiOiJhdCtqd3QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlNIQS0yNTYifQ.eyJzdWIiOiJkMWViNDBmOS0xZDlmLTRlOTItYjJhOC01ZTQwYzgwMGI1ODIiLCJhdWQiOiJzb21lQ2xpZW50SWQiLCJpc3MiOiJodHRwczovL2F1dGh6LnN3YW4uc2lnbi1pbi5zZXJ2aWNlLmdvdi5zY290IiwiZXhwIjoxNjcxODAzMzIyLCJpYXQiOjE2NzE4MDI0MjIsIm5vbmNlIjoiODg5YmU4NjQtYzUyZi00ZWE0LTg3MzEtOTc1MjNhMzEzMjBkIiwianRpIjoiNmI1ZTU0YmMtMGViOS00NGUxLWE5OTgtMjYwM2Q4MTg2ZmYyIiwic2lkIjoiU0lEIn0.lLxz4-FuLaS-n5NC3xAr5_xOcUupVw5do4DC5ia3c3gJgE7ieoRxuS6uo2qK_MyjdkUdAOSERA15EKSD9bDpYxPzNpv39MQolA8t2mvlxsW2-pDve1rWbrr9KJXDcbOwhln0Tu9EHCd50c2zNfhC5xyLj1CTCFpUOJc9iBykv6dsLCdIKCaBWidRY0xGKo8gShkE7sUBAJhnHYWJA_cHq2pRFrIutP-vkHoe59rnpeuB08BJ4PK7EjNlCvV_22AiLJfiiokHpgQsPT0WyVSehCFZ-wiUKbtyRqHqLaIAjkdJsgR3UqPaV7qcaV7lF2ctwC2qXCzdIi_IDPdcUwWvKQ",
  "token_type": "Bearer",
  "expires_in": 900
}
Errors - Request for Token

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.
If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:



HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"     
}
The table below has information on the error types you may encounter.
401
access_denied
Access_denied: Token not valid
402
N/A
N/A
 
invalid_session_id
Not found: Invalid SID or expired session
403
access_denied
 Access_denied: Token not valid
404
not_found
 Not Found: Page not found
500
internal_server_error
 
501
N/A
N/A
502
bad_gateway
bad_gateway
503
internal_server_error
internal_server_error : Internl Error. Please Retry
Step 13 - Verify Code_Challenge

The token end point verifies that the auth_code and code_challenge are valid.
Step 14 - Return Tokens

The token end point returns the following information:
id_token
access_token
refresh_token

Our access_token is valid for 15 mins
Step 15 - Check Signature

ScotAccount recommends that the relying party verify the signatures of the tokens received using the latest configuration from the Discovery End Point and the JWKS End Point.
Step 16 - Get Results

To view Verified Attribute Data the user needs to have completed the identity verification journey, using the scopes=openid&gpg-45-medium.
Then you will be able to make a GET request to /attributes/values using the access token returned from the token endpoint in the previous step and a private_key_jwt client assertion authentication method.
Request - Get Verified Attribute Data




GET "https://issuer.main.integration.scotaccount.service.gov.scot/attributes/values"
Headers:
    Authorization: "Bearer YOUR_ACCESS_TOKEN"
    DIS-Client-Assertion: "YOUR_ASSERTION"
Parameters - Get Verified Attribute Data

Parameter
Type
Description
Header
Authorization: "Bearer ****”
Required
Access_Token you received from the /token endpoint
Header
DIS-Client-Assertion: "****”
Required
This will be a JWT signed by the RP's private key. Info to help construct the JWT can be found in Make Authentication Requests with Auth Code Flow 

Response - Get Verified Attribute Data




{
  "claimsToken": "eyJraWQiOiJkTVZEIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXJpZmllZF9jbGFpbXMiOnsidmVyaWZpY2F0aW9uIjp7Im91dGNvbWUiOiJmMmNmZTBlMS02ZmJlLTRjYjYtOWU4ZC0xYzFmMTQyN2NjMmEgVkVSSUZJRUQgU1VDQ0VTU0ZVTExZIiwidHJ1c3RfZnJhbWV3b3JrIjoidWtfdGZpZGEiLCJhc3N1cmFuY2VfbGV2ZWwiOiJHUEc0NS1NZWRpdW0iLCJ0aW1lIjoiMjAyMy0wMi0xNVQxNjozOVoiLCJ2ZXJpZmllciI6eyJvcmdhbml6YXRpb24iOiJESVMiLCJ0eG4iOiJhNGRiZTg3Ny1kZjYzLTQ2MDgtOTViMC0zYTdmZTNhNGQ3NTEifX19LCJjbGFpbXMiOnsidXVpZCI6ImYyY2ZlMGUxLTZmYmUtNGNiNi05ZThkLTFjMWYxNDI3Y2MyYSIsImdpdmVuX25hbWUiOiJzYW1wbGVfZ2l2ZW5fbmFtZSIsImZhbWlseV9uYW1lIjoic2FtcGxlX2ZhbWlsaXlfbmFtZSIsImJpcnRoX2RhdGUiOiIxOTkwLTA5LTA4IiwiYWRkcmVzcyI6eyJ1cHJuIjoiOTA2NzAwMDgxNzU5Iiwic3ViQnVpbGRpbmdOYW1lIjoiMC8yIiwiYnVpbGRpbmdOdW1iZXIiOiI5OSIsInN0cmVldE5hbWUiOiJzYW1wbGVfc3RyZWV0X25hbWUiLCJhZGRyZXNzTG9jYWxpdHkiOiJzYW1wbGVfbG9jYWx0aW9uIiwicG9zdGFsQ29kZSI6IlgxMTFYWCJ9fX0="
}
 
Errors - Get Verified Attribute Data

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.
If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:



HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"     
}
The table below has information on the error types you may encounter.
401
access_denied
returned if the request is malformed in some way
402
N/A
N/A
 
invalid_session_id
Not found: Invalid SID or expired session
403
access_denied
 returned if assertion or access token is wrong.
404
not_found
 returned if there is no data for that user
500
internal_server_error
 if something has gone wrong with internal side.
501
N/A
N/A
502
bad_gateway
 if something has gone wrong with internal side.
503
internal_server_error
 if something has gone wrong with internal side.
Step 17 - Verify Access Token and Private_JWT

The Verified Data End Point verifies that both the access_token and private_jwt are correct and valid.
Step 18 - Send results JWT

Return to the Relying Party's application a signed JWT with verified claims of the end user.
Step 19 - Check signature of results

ScotAccount recommends that the Relying Party verify the signatures of the token received using the latest configuration from the Discovery End Point and the JWKS End Point.
Step 20 - Verify “sub” field in results

ScotAccount recommends that the Relying Party verifies that the correct valid user details are given, by checking the “sub” field matches the initial request sent.
 
For further detail about the responses you will receive, see: 
Understanding Responses - more info 



Technical - Setup and Configuration

Owned by Wallace T (Tom)
Last updated: Mar 13, 2025

We have a dedicated customer integration environment available for Relying Parties/ Service Customers (RPs/SCs) and or other interested parties, to demo / integrate / trial our service offerings. 

For the customer integration environments, the useful endpoints are in the table below.  We provide a mock backend to facilitate automated customer testing without having to use the UI of the real service. 

Capability

Details

Integration environment Demo RP pointing at Mock backend
	

ScotAccount OIDC Integration Demo RP to mock 

mock_service-V2 documentation
	

https://mock-dis.main.integration.scotaccount.service.gov.scot/v2/

Mock ScotAccount 
This provides the '/authorize', '/token' and '/attributes/values' endpoints. This mock allows you to request a mix of scopes for which data you want to simulate requesting:

/authorize: This endpoint handles the authorization process. It verifies the user's credentials and scopes requested.
/token: This endpoint issues access tokens after successful authorization.
/attributes/values: This endpoint retrieves attribute values based on the requested scopes.

Integration environment Demo RP pointing at Integration backend. 
	

ScotAccount OIDC Integration Demo RP to Int backend

discovery_endpoint
	

https://authz.integration.scotaccount.service.gov.scot/.well-known/openid-configuration

 
	

 

 

Relying Parties are required to provide the below details to ScotAccount to set up a client ID:

    public IP Addresses re backend (not needed for connection to Integration/ test environment)

    your private_key_jwt, public part

    your FQDN

    your redirect url

    your logout url

    a name of your service

    the list of scopes RP would like to be able to request, these are outlined in Technical - Overview 

We will then Register a Client and provide Back a “Client ID”.

Note: Step 6 “name of your service”, will be displayed on specific ScotAccount pages for dual branding purposes
1. Provide IPs for our Allow Lists

For Production, you will need to provide any IPs for your “BackEnd” to communicate with the service. This is a Security Mechanism to restrict access. They are not needed to connect you to Integration/ test environment. 

    We prefer individual, static IPs where possible

    But ranges are also allowed

2. Provide your public key for private_key_jwt method call

As part of our client authentication process, the Relying Party application will need to provide a signed JWT called a ‘client assertion’ on endpoints that require ‘private_key_jwt’ authentication.

You’ll need your private key when:

    You request the token using the private key authentication mechanism on the /token endpoint.

    You request data from Issuer Attribute Endpoint ( /attributes/values )

You’ll need to provide a public key when registering your service. You can generate a key pair (a public key and a corresponding private key) using OpenSSL.

 

Best Practices for storing and handling private keys:

    Once you’ve generated your private key you must store the private key in a secure location such as AWS Secrets Manager or HashiCorp Vault.

    Limit access to the private key to authorized personnel only

    Do not share the private key with unauthorized individuals

    Key must be mounted into the application at runtime using a tmpfs file.

You MUST use a different set of key pair for Production to the one you use in the test environment/s.

Supported Algorithms

We support RSA or Elliptic Curve based signing keys.

When deciding between ECDSA vs RSA, both can provide equivalent levels of security given long enough key sizes. As ECDSA uses smaller keys to achieve the same level of security and it generally performs faster than RSA.

When generating an RSA key you need to decide how long the key will be. A longer key is more secure but slower.

When generating an elliptic curve key you need to decide on a curve to use which corresponds to the length of the key, similar to RSA a longer key is more secure but slower.

For ES256 (256 ECDSA key using curve P256 and SHA-256) this provides 128 bits of security and is considered safe from being cracked beyond 2030. For and RSA key to provide equivalent security it will have to have a key size of 3072 bits or greater. A 2048 bit RSA key is still considered safe from being cracked for the next few years but longer is recommended.

Using OpenSSL, run the following on your command line to generate an RSA key pair:
openssl genrsa -out private_key.pem 3072
openssl rsa -pubout -in private_key.pem -out public_key.pem

The last parameter (3072 here) is the length of the RSA key in bits.

    private_key.pem: This file contains the RSA private key.

    public_key.pem: This file contains the corresponding RSA public key extracted from the private key.

the number of bits needs to be 2048 or greater

When generating an elliptic curve key you should use the curve below.

JWT Signing algorithm

Curve

OpenSSL curve name

ES256
	

P-256
	

prime256v1

Using OpenSSL, run the following on your command line to generate an EC key pair:
openssl ecparam -name prime256v1 -genkey -noout -out private_key.pem
openssl ec -in private_key.pem -pubout -out public_key.pem

    ecparam generates the EC private key.

    -name prime256v1 specifies the elliptic curve to use.

    -out private_key.pem specifies the output file for the private key.

    -genkey generates the key pair.

    -noout prevents output of the parameters of the key.

    ec -pubout extracts the public key from the private key.

    -in private_key.pem specifies the input file for the private key.

    -out public_key.pem specifies the output file for the public key

You have now generated your key pair, which will appear on your machine as 2 files:

    public_key.pem - This is your public key, which you should share with us.

    private_key.pem - This is your private key, which you should store securely and NOT share.

Once you have generated your key pair, you can use it to create a private_key_jwt.

Process to create JWK key via Command line:

    A simple Java command-line utility created by Justin Richer can be used to generate keys in JWK format. It supports these key types:

        RSA key

        EC key

Example: validate a public_key_jwt :
java -jar json-web-key-generator.jar -t RSA -s 2048 -i 1 -u sig -S

The JWK generator will then output a JSON object similar to this:
{
  "keys": [
    {
      "d": "Y5ULK-bLRqKAg6FcuDx4HCQmnMYUv67IQ394KBmw6F-LbdbMhNyn6UH2RAr4Wkg-TL0QXZbfuOdvvE8ZlGeWJxCGx2XOzO1wQT12mhNTD1S9NtrD_wQMc34sE6Qy5JK2CE-tWzPRT_cKzWXEJGsR0FWHphUjZOg7-vfAgPYZaZ7rptdgtq3mEs45MiURVx7DBgu5AH2x0R-s37wtR1Xw9Vx1tD6ScGl7sMu7RWerDbkkfuAUSnON_8lHzHt_GvWYI3za4KiWRH5HeYVACQ3nBrnKju_kMp9lLEGC6pgbLkthnvjf0KjMcUoKrRMKKbENhyzwFcZ6pZAtdUg-Ec3AYQ",
      "e": "AQAB",
      "n": "j37Y-Fmx2Pr9xCHXhBWvDRaXobvpikF2Nd2J_FoK8U5SlMebmqrEwddegw4OoWbBcTfcK9UMiK7mOYH7xpIxPmXyUl_ByMLT-0gTLhq-KhzsZ3SxoUqVThF6-x8XJ8DiBYO3RUSfZ3xwQwHtlXdhg6hk-iUaArYBEKGhp8R75d4w6gFHXnSzgY_llxwU7dBFUgk6H1CbBK1ozmOP5xzgnSovYt5PEetwfHjbSm_q1yFd9AuwT5QgFQhmB2jJH9rdL_W4zf8U71a3tuN-fG3LmXc2jtuDMg5LAVjzaXtPX0kQKH8_88qER1UeNfa3ceJgCfvr_EVt8PkIkh8mhB4AbQ",
      "kty": "RSA",
      "use": "sig",
      "kid": "1"
    }
  ]
}

Note: The JWK generator sources can be obtained from its Github repo at 

 

3. Provide us with you FQDN or localhost

As part of the on-boarding process you will need to provide us with your fully qualified Domain Name.

    You can supply “localhost”, if you are running both the client browser and the server from your laptop

    You can supply, a Public FQDN. Example “dummyrp.test.org.gov.scot”

The use of “localhost and “http” is ONLY allowed in our integration environment
4. Provide us with your redirect URI

As part of the on-boarding process you will need to provide us a set of one of many redirect-uri, as part of the client registration process.

Full detailed information can be found in “Stage 3 - Technical - Make Requests with Auth Code Flow and PKCE”
5. Provide us with your Logout URI

As part of the on-boarding client registration process you are asked provide us a Logout uri  More information about the use of Logout can be found in “Stage 3 Technical - Make a Request for Logout” section.

For an Example, see below:

    https://yourservicetest.gov.scot/logout

6. We will Register a Client, and provide Back a “Client ID”

Once you have provided us all the information from steps 1 to 5, we will register your Relying Party application and return a “Client ID”, back to RPs/SCs.
7. List of scopes RP would like to be able to request

openid is required for every request and on its own it is authentication only

    openid  

    scotaccount.email

    scotaccount.gpg45.medium

    scotaccount.address 

8. Simple Test

There is a simple way you can use to ensure the IP Allow List has been implemented for you in our integration environment as follows:

GET https://authz.integration.scotaccount.service.gov.scot/.well-known/openid-configuration 

    If successful, you will receive a http response code of 200, and a json object

    If failure, you will receive a http response code of 503, timeout. You should contact us in this case.

Example Version Json object
{"App":{"SSO":{"Authn-Frontend":{"commit_sha":"c59129d74871de4beca837ed6045c6e973c23d27","build_number":"14112","version":"release-20221116.1","release_id":"20221116.1"},"Authn-Api":{"commit_sha":"c59129d74871de4beca837ed6045c6e973c23d27","build_number":"14112","version":"release-20221116.1","release_id":"20221116.1"},"Authz-Service":{"commit_sha":"c59129d74871de4beca837ed6045c6e973c23d27","build_number":"14112","version":"release-20221116.1","release_id":"20221116.1"},"Authz-Server":{"commit_sha":"c59129d74871de4beca837ed6045c6e973c23d27","build_number":"14112","version":"release-20221116.1","release_id":"20221116.1"}}},"Platform":{"sg-identity-platform-sgidentityplatformsgidentityplatformimportedclustersgidentityplat-167GRCPH6KXPA":"20221116.0","sg-identity-platform":"20221116.0","platform-dns-stack":"20221116.0","identity-eks-stack":"20221116.0","BaselineStack":"20221116.0","subscription-filter-stack":"20221116.0","ssm-stack":"20221116.0","sg-alerting-stack":"20221116.0","PersistentLoggingStack":"20221116.0"},"PWYA":{"Consent-Service":{"version":"release-20221116.0","commit_sha":"2bd208f0af7b715b0f0aee66a7c4d381668fafc0","build_number":"14108","release_id":"20221116.0"},"Consent-UI":{"version":"release-20221116.0","commit_sha":"2bd208f0af7b715b0f0aee66a7c4d381668fafc0","build_number":"14108","release_id":"20221116.0"},"IDV-Service":{"version":"release-20221116.0","commit_sha":"2bd208f0af7b715b0f0aee66a7c4d381668fafc0","build_number":"14108","release_id":"20221116.0"},"IDV-UI":{"version":"release-20221116.0","commit_sha":"2bd208f0af7b715b0f0aee66a7c4d381668fafc0","build_number":"14108","release_id":"20221116.0"},"Orchestrator":{"version":"release-20221116.0","commit_sha":"2bd208f0af7b715b0f0aee66a7c4d381668fafc0","build_number":"14108","release_id":"20221116.0"},"Attribute-Service":{"version":"release-20221116.0","commit_sha":"2bd208f0af7b715b0f0aee66a7c4d381668fafc0","build_number":"14108","release_id":"20221116.0"}}}

 
Test with ScotAccount's integration environment

Owned by Wallace T (Tom)
Last updated: Jul 09, 2025

Before you can use ScotAccount, you need to build a proof of concept client and explore the end-to-end journey in our integration environment. This will help you understand how to integrate with ScotAccount and where it will fit within your service.

Where your service may require verified attributes from users, you must first Make Authentication Requests with Auth Code Flow  before making any request for verified attributes.  
Requesting verified attributes.

Verified attributes are requested using OIDC scopes. The current list of verified attributes is shown in the Technical - Overview  . After a user has been authenticated, you must run a subsequent auth code flow to Make requests for Verified Attributes Flow  .  It is important to understand both the technical mechanism to make requests for verified attributes and the underlying verified attributes business rules (see below), as well as the ScotAccount data schema   for verified attributes.
Business rules for verified attributes

    Your must first authenticate a user and check (using the UUID) whether you still require any verified attribute/s. You should not request verified attributes that you have previously been provided.

    Following that, one or more verified attributes can be requested, as scopes, as part of an auth code flow.

    ScotAccount will try its best to provide all of the requested verified attributes, but for various reasons (e.g. data not available, ScotAccount unable to verify the data, user doesn’t give permission, user cancels etc), it may not always be possible. If this is the case, ScotAccount will return as many of the verified attributes as it can—this could be any permutation of those requested, from none to all. The ScotAccount data schema   describes the data model for the attributes response. 

    The user needs to be present and give their permission before data about them is provided i.e. there is no long-lived access/ refresh tokens for the attribute endpoint. Essentially the tokens are issued ‘per flow’. 

    Multiple auth code flows can be run separately to request multiple verified attributes.  For example, an RP may ask for some verified attributes at the beginning of a user’s application process but later determine that additional verified attributes are required. RPs must avoid sending repeated requests for the same verified attributes, which could create loops for the user.

 

The technical lifecycle is as follows:

    Authenticate your users 

    Make requests for verified attributes using scopes

    Manage your user's session 



Below diagram shows the Auth code flow detailing authentication steps process for ScotAccount using PKCE:
image-20240501-214927.jpg
Authentication flow

 

Below is the UML Code for the above flow diagram. One can use Plant UML website to view the code and compile the same if required. PlantUML Web Server

 
Authn flow - tech docs
30 Aug 2024, 04:17 pm
Step 1 - Browse to Relying Party’s application

The end user browses to the Relying Party's web application.
Step 2 - Well Known Endpoint

A well known endpoint is part of the OIDC protocol and is used as a reference point for configuration information to make sure that both the RP and OP can change information dynamically at runtime.

ScotAccount recommends that the relying party calls the Discovery Endpoint prior to commencing each OIDC flow. This will ensure any configuration changes are dynamically applied.

NOTE: https://authz.integration.scotaccount.service.gov.scot/.well-known/openid-configuration is only for use with our integration environment. Production has its own well known endpoint.
 Step 3 - JWKS_URI

The jwks_uri endpoint provides an interface to see our public key, which we use for signing of JWt’s.

It contains the following information [ “kty” , “e” , “use” , “kid” , “n” ]

Keys will be rotated periodically, and the current and old keys will be kept available. The most resent key will always be the first one available in the json structure.

Day 1
	

{"keys":[{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}

Day 2
	

{"keys":[
{"kty":"RSA","e":"AQAB","use":"sig","kid":"XsXX","n":"456"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}

Day 3
	

{"keys":[

{"kty":"RSA","e":"AQAB","use":"sig","kid":"ZZ12","n":"789"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"XsXX","n":"456"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}

    "kty": Key Type - Indicates that it's an RSA key.

    "e": Public Exponent - The exponent used for RSA encryption/decryption.

    "use": Key Use - Indicates that the key is used for signature verification.

    "kid": Key ID - A unique identifier for the key.

    "n": Modulus - Part of the RSA public key.

ScotAccount recommends that the relying party calls the JWKS prior commencing each OIDC flow. This will ensure the latest ScotAccount public key is available to the relying party. ScotAccount routinely and automatically rotates signing keys.

Rotation of keys ensures that there is always a valid key available for verifying JWT signatures, and older keys are retained for a period to handle JWTs signed with those keys.

NOTE: https://authz.integration.scotaccount.service.gov.scot/jwks.json is for use with our integration environment.
Step 4 - Make a Request for Authentication

To make an authentication request, your application should first send the user to the authorisation URL.

An example of the command is detailed below.

Authorisation URL Request
GET https://authz.integration.scotaccount.service.gov.scot/authorize?
client_id="YOUR_CLIENT_ID"
&redirect_uri="YOUR_REDIRECT_URI"
&response_type=code
&scope=openid
&code_challenge_method=S256
&code_challenge="YOUR_CODE_CHALLENGE"
&state="YOUR_STATE"
&nonce="YOUR_NONCE"

Our Authentication flow is valid for 7 days. This means you will need to persist the &state parameter for up to 7 days.
Parameters - Request for Authentication

Replace the placeholder values or “YOUR_*” from the above request with your specifics and follow the guidance provided.

Parameter

Type

Description

client_id
	

Required
	

You will have been be issued your client_ID during onboarding with ScotAccount.

redirect_uri
	

Required
	

You’ll have specified one or moreredirect_uri during onboarding with ScotAccount.
The redirect URI parameter must exactly match one of the redirect URIs you specified, except that it must be URL-encoded.

URI to which the authorisation server will redirect the user after authentication and authorisation.

response_type
	

Required
	

You must set this value to be code: response_type=code.

scope
	

Required
	

openid

code_challenge_method
	

Required
	

This value indicates which encryption algorithm has been used to generate the code_challenge. ScotAccount only support SHA-256 therefore this value must be set to S256.

code_challenge
	

Required
	

We mandate the use of Proof Key for Code Exchange (PKCE) and this parameter is your code_challenge that is generated from your code_verifier by your OIDC client library.

OAuth have a very good explanation of the PKCE protocol here on their website.

state
	

Required
	

When you receive a response at the redirect URL, there must be a way to verify the response came for a request which you sent. The state value solves this issue by binding the request and response, which reduces impact of Cross Site Request Forgery attacks.
This value will be returned to the client in the authentication response. As DIS allows OIDC flows to last up to 7 days

nonce
	

Required
	

A unique value generated by your application that is used to verify the integrity of the id_token and mitigate replay attacks
Response - Request for Authentication
HTTP/1.1 302 Found
Location: https://YOUR_REDIRECT_URI?code=YOUR_CODE&state=xyzABC123
Errors - Request for Authentication

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.

If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:
HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"     
}

The table below has information on the error types you may encounter. These include the oauth standard errors. 

Http Code
	

Error Code
	

Error Description

302
	

account_selection_required
	

Account sign-up was cancelled

302
	

access_denied
	

See oauth standard errors.

302
	

invalid_dis_prompt
	

Invalid dis_prompt: found more than one: *List of invalid prompts*

302
	

invalid_dis_prompt
	

Invalid dis_prompt: *Invalid prompt*

302
	

invalid_request
	

Required PKCE method(s): [plain, S256]

302
	

invalid_request
	

Invalid Request: Missing state parameter

302
	

invalid_request
	

Invalid request: Missing response_type parameter

302
	

invalid_request
	

Invalid request: Missing redirect_uri parameter

302
	

invalid_request
	

Invalid request: Invalid claims parameter: Invalid JSON

302
	

invalid_request
	

Invalid request: Invalid claims parameter: Unexpected type of JSON object member with key *Invalid json key*

302
	

unsupported_response_type
	

Unsupported response type

302
	

unsupported_response_type
	

Unsupported response type *Unsupported response type*

302
	

invalid_scope
	

Invalid scope: missing scope openid

302
	

invalid_scope
	

Invalid scope: *Invalid scope*

302
	

invalid_claims
	

Invalid claims: invalid parameter format

302
	

invalid_claims
	

Invalid claims: *List of invalid claims*
Step 5 - Redirect

The Relying Party’s web application issues a 302 http redirect with the necessary authentication request and parameters needed.
Step 6 - Authentication Request

The User Agent executes the request from Step 3.
Step 7 - User Authentication

ScotAccount provides a series of screens for authentication to happen
Step 8 - Store the auth_code challenge and method

ScotAccount stores auth_code challenge and method
Step 9 - Redirect with REDIRECT_URI

The Relying Party's web application issues a http redirect using the REDIRECT_URI.

This is part of the callback mechanism used after successful authentication in the OIDC Flow.
Step 10 - Send auth_code to RP

A auth_code is generated after a successful OIDC Flow and returned back as a query parameter on the redirect in this step.
Step 11 - Make a Request for Token

 

To make a request to the token endpoint, the relying party’s application needs to exchange your authorisation code for tokens, you’ll need to make a POST request to the /token endpoint using the private_key_jwt client assertion authentication method.

Request - Request for Token

The request for token should look like:
POST https://authz.integration.scotaccount.service.gov.scot/token?grant_type=authorization_code&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&code=YOUR_CODE&client_assertion=YOUR_CLIENT_ASSERTION&redirect_uri=YOUR_REDIRECT_URI&code_verifier=YOUR_CODE_VERIFIER

Where “YOUR_CODE”   “YOUR_CLIENT_ASSERTION”  “YOUR_REDIRECT_URI” and “YOUR_CODE_VERIFIER”  are replaced with your values.
Example of the body of Client Assertion

Below is as an example of client assertion. It needs to be signed with your private_jwt_key.
{
    "iss": "Your client ID",
    "sub": "Your client ID",
    "aud": "This is the endpoint you are sending this assertion to. I.e https://authz.integration.scotaccount.service.gov.scot/token or https://issuer.main.integration.scotaccount.service.gov.scot/attributes/values",
    "exp": 1647949460384, //Unix timestamp with expiry of the assertion. As long as not expired anything can go in there
    "jti": "aa78f001-69d2-4142-9a43-d88ac4f6d050" //unique id for token, should be unique for each request
 }
Parameters - Request for Token

Please replace “YOUR_*”, from the above request, with the specific Relying Party values, following the advice/information provided below.

Parameter

Type

Description

client_assertion_type
	

Required
	

Format - "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"

code
	

Required
	

This information is provided in the previous step

grant_type
	

Required
	

Format - "authorization_code"

redirect_uri
	

Required
	

You’ll have specified one or moreredirect_uri during onboarding to ScotAccount.
The redirect URI parameter must exactly match one of the redirect URIs you specified, except that it must be URL-encoded.

client_assertion
	

Required
	

See above the example of client assertion

code_verifier
	

Required
	

As part of the PKCE process, the OP will return a "code_verifier" , as part of the authorization process, that will need to be stored, and sent back to the /token endpoint.

This is a security feature to stop MITM - Man in the Middle Attacks.
Response where scope is openid
{
  "access_token": "eyJraWQiOiJXZ2lHIiwidHlwIjoiYXQrand0IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0ZjY4OTNmNC02ZmJlLTQyM2UtYTVjYy1kM2M5M2U1YTdjNDEiLCJzY3AiOlsib3BlbmlkIl0sImlzcyI6Imh0dHBzOi8vYXV0aHouc3dhbi5zaWduLWluLnNlcnZpY2UuZ292LnNjb3QiLCJleHAiOjE2Nzg5MzI2NjIsImlhdCI6MTY3ODkzMTc2MiwianRpIjoiekY4Q1VQRC10ZVkiLCJjaWQiOiI1eWh5Z2tzY3R3cHFnIn0.LiE0ocHRkXNINwwxol4XrKqYMuafZ2-gSP1S2huPam-anV9uxMxvbm7W6pvWe8n2mOUsxFDQVNgVP8OuoFuMj-nhWvm5ZornnACmHS1g0MkECOabQmnYrmqcWJesYvrlMRccrie20ZM34_wALQYL2xgtKNBBaUaD6rTmjiKU3TGgX2q7b71A72YqA9stxQjBocjjWcJuXHrbt_qmyuiS2SVniRvmOXnukpiGPLIBZshJGm3SpZiAknfrlo7EQCQUru9NHuj9DYf1wxoRYzZh8nYLXvAm7lzxkVvH1AhhHoj2TAF6YXvMOZPRC7PSrc9hOxYz3xJkOZnQmfyucyh8-Q",
  "refresh_token": "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..vnC6Aa6eIzxwHxP1eIk2rA.4or8EM0wJZfj0-w3YfjK-pz97Iysa57njT7UDuGJKa3TkFxgs1sCws9zWfYjuEK7KU_j8spLc50ngaSGQaqq23z2T-suL-B0JC949Exl_-48zPEBiQCqsBEKo338973xMm7_Arvp86aQQDQ7i5KTSd05vXqA7YCW7WCEgIG1k93JPsY0pp70NSBqPP-wpCu914yPkXTvQlte5TbyoVpH89mafQg4oyfvzQT2NBtMOC_LoeOImSOKuD0dLCNmgrsXn5CrcXLfquk8bTR283G2qE9AguphWGjm3hWIqVhXuCgZo7AsBkPxbsnt0oIQ7UuD3ZH_n7qRagiC9rOuBdYgmNaYfAYRtpEujVXB8GnwMniSgn0iyB8-tf-x3Gs8ihQe8x-dwOXwMMrXXrM11Wnevh2ZOr8TQoh4f_JHXmy7OdvcqaRTa2JzEre9gy1vSevkK6lPbCV1IeD1oIPkJk3A7FKNrWlVS5w0uJa1KaItVrQtrFrhgMHwGIqkVcWNQ-ZEnvRCRqoFzt812m6jUHchpxlFHFiiQ58kfIl6UyH9_vc8pSONMxQbgoBJftLKR0JqxHU3pTpmIjPupLxMl3YMDIdLGPmemK8pmPbHB9zvCq4eR7HiiYsb5JweBxOUaPlNCdkjj1MT30q56tldEoila_mk5V75Dj3U5EhqpRlyFYTLSzPHRjBnjlrGTb8FqZ6zSNC8JZ_U4q2LWkJge4RT2riOIC1yLmfy2K1NflNKi99P5CGzuzmavX3Yv9usqK_3CKnTPOAbtIR9lJO4eBz6uxsaB7JTp_ASxhG96OIkuupph4OvLuPVX8vX6f0i05Ay5Xa0b2-7WBR-i9m7VjUoFUCH4m2HwSzp30oOmQw_n0nT7tM_1_mXDd95StbKavkb9Yjdzg6BVA5Ux9eKU-WrF05rB9YLT5u1E4M3cNA7XCpvR935O1Hty-Z7_U58MGG2SPYKlquTjtHPV4v7Kb3M_Astr8OzDiR3Rw4q59Xd8Ak.Y4pYS8iU7Jft6ay6yywpig",
  "scope": "openid",
  "id_token": "eyJraWQiOiJXZ2lHIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0ZjY4OTNmNC02ZmJlLTQyM2UtYTVjYy1kM2M5M2U1YTdjNDEiLCJhdWQiOiI1eWh5Z2tzY3R3cHFnIiwiaXNzIjoiaHR0cHM6Ly9hdXRoei5zd2FuLnNpZ24taW4uc2VydmljZS5nb3Yuc2NvdCIsImV4cCI6MTY3ODkzMjY2MiwiaWF0IjoxNjc4OTMxNzYyLCJub25jZSI6IkJkSExEV1BSbVk4V0JZTjZCRXRGZkkyUlZvSm15Q1JwcEdGSXQyaEd5N0EiLCJqdGkiOiJmUF9XXzJ3NjVpVSIsInNpZCI6Inl4WjJWcE9ueWRWMENUOGoxU2JsZnp0UllEcmtxLVNKM09IN2VqRjdHUWcifQ.db79iKccqKkXF4MF2IThOV05AZHrlvmNZWAW5ojUzyQoKzHSlPtCEeC3sqwsah84gHMqU0A9ACWPbE8SECdpzOvL6QVCfoWjwuiMEzMsOZvCHccMEpeNX8rbB7_L5Mo5lLOpVl80jIezKNQJ8NMQoOgMGaBm5qkgLTVFuYqVnvpzAEb44xDeSYe7__jaXOUBiGIWMqopeqJRmR1cy5yJ9ShqDa_xoBVmAxXXXv0ZOanE7E7-LCBApdvFNRA-JUUrjMIYUNn8cSkupye6bjLElLT_qPKJc6N0mSOhH43oU5GB-heMhNX18p-07J5pFFAHotcP6VsA2mE7y96gLQ1XrA",
  "token_type": "Bearer",
  "expires_in": 900
}
Errors - Request for Token

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.

If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:
HTTP/1.1 501 Bad Request
Content-Type: application/json
{
  "error": "internal_server_error"
  "error_description": "Technical Error"     
}

The table below has information on the error types you may encounter.

401
	

access_denied
	

Access_denied: Token not valid

402
	

N/A
	

N/A

 
	

invalid_session_id
	

Not found: Invalid SID or expired session

403
	

access_denied
	

 Access_denied: Token not valid

404
	

not_found
	

 Not Found: Page not found

500
	

internal_server_error
	

 

501
	

N/A
	

N/A

502
	

bad_gateway
	

bad_gateway

503
	

internal_server_error
	

internal_server_error : Internl Error. Please Retry

 
Step 12 - Verifies auth_code and code_challenger

The token end point verifies that the auth_code and code_challenge are valid
Step 13 - Returns Token

The token end point returns the following information:

    id_token

    access_token

    refresh_token

Our refresh_token is valid for 15 mins
Step 14 - Extract “sub” in ID_Token

The “sub” field can be extracted from the id_token, this is a immutable GUID that is associated with the end user and never changes.

ScotAccount recommends that the relying party verify the signatures of the tokens received using the latest configuration from the Discovery End Point and the JWKS End Point.

ScotAccount also recommends to verify that the ‘nonce’ in ID token is the same as ‘nonce’ provided in original request.

The “sub” field can be used by the Relying Party’s application as a primary/secondary key to identity the end user.

 

For further detail about the responses you will receive, see: Understanding Responses - more info  


Make requests for Verified Attributes Flow

Owned by Wallace T (Tom)
Last updated: Jun 13, 2025
Overview - requesting verified attributes.

Verified attributes are requested using OIDC scopes. The current list of verified attributes is shown in the Technical Overview. After a user has been authenticated, you must run a subsequent auth code flow to make requests for verified attributes.  It is important to understand both the technical mechanism to make requests for verified attributes and their underlying business rules (see below), as well as the ScotAccount data schema.
Business rules for verified attributes

    Your must first authenticate a user and check (using the UUID) whether you still require any verified attribute/s. You should not request verified attributes that you have previously been provided.

    Following that, one or more verified attributes can be requested, as scopes, as part of an auth code flow.

    ScotAccount will try its best to provide all of the requested verified attributes, but for various reasons (e.g. data not available, ScotAccount unable to verify the data, user doesn’t give permission, user cancels etc), it may not always be possible. If this is the case, ScotAccount will return as many of the verified attributes as it can. This could be any permutation of those requested, from none to all. The ScotAccount data schema describes the data model for the attributes response. 

    The user needs to be present and give their permission before data about them is provided i.e. there is no long-lived access/ refresh tokens for the attribute endpoint. Essentially the tokens are issued ‘per flow’. 

    Multiple code flows can be run separately to request multiple verified attributes.  For example, an RP may ask for some verified attributes at the beginning of a user’s application process, but later determine that additional verified attributes are required. RPs must avoid sending repeated requests for the same verified attributes, which could create loops for the user.

The following example uses the ScotAccount.gpg45.medium (ie identity attribute) as illustrative example but any combination of the verified attribute scopes may be requested in one flow. 
Identity attribute Flow

 

Below diagram shows the flow of openid & ScotAccount.gpg45.medium:
image-20240501-215513.jpg
Identity attribute flow

Below is the UML Code for the above flow diagram. One can use Plant UML website to view the code and compile the same if required. PlantUML Web Server

 
IDV flow - tech docs (1)
30 Aug 2024, 04:17 pm
Step 1 - Browse

The end user browses to the Relying Party's web application.
Step 2 - RP requests verified attribute/s 

The RP requests verified attribute/s.
Step 3 - Well Known Endpoint

A well known endpoint is part of the OIDC protocol and is used as a reference point for configuration information to make sure that both the RP and OP can change information dynamically at runtime.

ScotAccount recommends that the relying party calls the Discovery Endpoint prior commencing each OIDC flow. This will ensure any configuration changes are dynamically applied.

NOTE: https://authz.integration.scotaccount.service.gov.scot/.well-known/openid-configuration is for use with our integration environment.
 Step 4 - JWKS_URI

The jwks_uri endpoint provides an interface to see our public key, which we use for signing of JWt’s.

It contains the following information [ “kty” , “e” , “use” , “kid” , “n” ]

Keys will be rotated periodically, and the current and old keys will be kept available. The most resent key will always be the first one available in the json structure.

Day 1
	

{"keys":[{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}

Day 2
	

{"keys":[
{"kty":"RSA","e":"AQAB","use":"sig","kid":"XsXX","n":"456"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}

Day 3
	

{"keys":[

{"kty":"RSA","e":"AQAB","use":"sig","kid":"ZZ12","n":"789"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"XsXX","n":"456"},
{"kty":"RSA","e":"AQAB","use":"sig","kid":"WgiG","n":"123"}]}

ScotAccount recommends that the relying party calls the JWKS prior commencing each OIDC flow. This will ensure the latest ScotAccount public key is available to the relying party. ScotAccount routinely and automatically rotates signing keys.

NOTE: https://authz.integration.scotaccount.service.gov.scot/jwks.json is for use with our integration environment.
Step 5 - Make a Request for Authentication

 

To make an authentication request, your application should first send the user to the authorisation URL. To send the user to the authorisation URL, run this command below to make a GET request, and follow the guidance in the following table to

Request
GET https://authz.integration.scotaccount.service.gov.scot/authorize?
client_id="YOUR_CLIENT_ID"
&redirect_uri="YOUR_REDIRECT_URI"
&response_type=code
&scope=openid&gpg-45-medium
&code_challenge_method=S256
&code_challenge="YOUR_CODE_CHALLENGE"
&state="YOUR_STATE"
&nonce="YOUR_NONCE"

Our Authentication flow is valid for 7 days.
Parameters - Request for Authentication

Replace the placeholder values or “YOUR_*” from the above request with the Relying Party specifics and follow the guidance provided.

Parameter

Type

Description

client_id
	

Required
	

You will have been be issued your client_ID during onboarding with ScotAccount.

redirect_uri
	

Required
	

You’ll have specified one or moreredirect_uri during onboarding with ScotAccount.
The redirect URI parameter must exactly match one of the redirect URIs you specified, except that it must be URL-encoded.

response_type
	

Required
	

You must set this value to be code: response_type=code.

scope
	

Required
	

This value indicates which verified attributes are being requested.

code_challenge_method
	

Required
	

This value indicates which encryption algorithm has been used to generate the code_challenge. ScotAccount only support SHA-256 therefore this value must be set to S256.

code_challenge
	

Required
	

We mandate the use of Proof Key for Code Exchange (PKCE) and this parameter is your code_challenge that is generated from your code_verifier by your OIDC client library.

OAuth have a very good explanation of the PKCE protocol here on their website.

state
	

Required
	

When you receive a response at the redirect URL, there must be a way to verify the response came for a request which you sent. The state value solves this issue by binding the request and response, which reduces impact of Cross Site Request Forgery attacks.
This value will be returned to the client in the authentication response

nonce
	

Required
	

A unique value generated by your application that is used to verify the integrity of the id_token and mitigate replay attacks
Response - Request for Authentication
HTTP/1.1 302 Found
Location: https://YOUR_REDIRECT_URI?code=YOUR_CODE&state=xyzABC123

 
Errors - Request for Authentication

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.

If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:
HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"     
}
Step 6 - Redirect

Issue a 302 http redirect with the necessary authorisation request and parameters needed. This will be passed to the User_Agent, so that when authentication happens, a user input will happen.
Step 7 - Authentication Request

ScotAccount provides a series of screens for authentication to happen
Step 8 - User Consents to share verified attribute/s

ScotAccount provides a series of screens for consent and sharing to happen.
Step 9 - Store Verification Challenge

Once Authentication has happened, the code_challenge parameter in the authorisation request (PKCE) is stored, and validated again by the token end point.

This is a security feature.
Step 10 - Redirect

Issue a 302 http redirect with the necessary authorisation request and parameters needed. This will be passed to the User_Agent, so that when authentication happens, a user input will happen.
Step 11 - Send Auth_Code

A auth_code is generation after a successful OIDC Flow and returned back to the End User.
Step 12 - Make a Request for Token

To make a request to the token endpoint, the relying party’s application needs to exchange your authorisation code for tokens, you’ll need to make a POST request to the /token endpoint using the private_key_jwt client assertion authentication method. 
Request - Request for Token
POST https:\/\/authz.integration.scotaccount.service.gov.scot\/token
{
  "client_assertion_type":  "YOUR_CLIENT_ASSERTION_TYPE",
  "code":                   "YOUR_CODE",
  "grant_type":             "authorization_code",
  "redirect_uri":           "YOUR_REDIRECT_URI",
  "client_assertion":       "YOUR_CLIENT_ASSERTION",
  "code_verifier":          "YOUR_CODE_VERIFIER"
}

Our access_token is valid for 15 mins
Parameters - Request for Token

Please replace “YOUR_*”, from the above request, with the specific Relying Party information, following the advice/information provided below.

Parameter

Type

Description

client_assertion_type
	

Required
	

Format - "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"

code
	

Required
	

This information is provided in the previous step

grant_type
	

Required
	

Format - "authorization_code"

redirect_uri
	

Required
	

You’ll have specified one or moreredirect_uri during onboarding to ScotAccount.
The redirect URI parameter must exactly match one of the redirect URIs you specified, except that it must be URL-encoded.

client_assertion
	

Required
	

This is your public key in a jwt format.

code_verifier
	

Required
	

As part of the PKCE process, the OP will return a "code_verifier" , as part of the authorization process, that will need to be stored, and sent back to the /token endpoint.

This is a security feature to stop MITM - Man in the Middle Attacks.
Responses - Request for Token
Response where scope is openid&gpg-45-medium
{
  "access_token": "eyJ0eXAiOiJhdCtqd3QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlNIQS0yNTYifQ.eyJzdWIiOiJkMWViNDBmOS0xZDlmLTRlOTItYjJhOC01ZTQwYzgwMGI1ODIiLCJzY3AiOlsiZ2l2ZW5fbmFtZSIsImZhbWlseV9uYW1lIiwiYmlydGhfZGF0ZSIsInVwcm4iLCJvcmdhbmlzYXRpb25OYW1lIiwiZGVwYXJ0bWVudE5hbWUiLCJzdWJCdWlsZGluZ05hbWUiLCJidWlsZGluZ051bWJlciIsImJ1aWxkaW5nTmFtZSIsImRlcGVuZGVudFN0cmVldE5hbWUiLCJzdHJlZXROYW1lIiwiZG91YmxlRGVwZW5kZW50QWRkcmVzc0xvY2FsaXR5IiwiZGVwZW5kZW50QWRkcmVzc0xvY2FsaXR5IiwiYWRkcmVzc0xvY2FsaXR5IiwicG9zdGFsQ29kZSIsImdwZy00NS1tZWRpdW0iLCJvcGVuaWQiXSwiaXNzIjoiaHR0cHM6Ly9hdXRoei5zd2FuLnNpZ24taW4uc2VydmljZS5nb3Yuc2NvdCIsImV4cCI6MTY3MTgwMzMyMiwiaWF0IjoxNjcxODAyNDIyLCJqdGkiOiIwMmJlMjE2MC1kZDNkLTRmMzctOGZmMy03NjI2ODgwNGY4OGUiLCJjaWQiOiJzb21lQ2xpZW50SWQifQ.mXtyLOWRefeE95jlxFbbpXdfvhT40vGnyjmOoiKb-KBS73zUU_hCoDTjN2T5UOSEtCm5lZfEVhQTX1Xfj0SsGLtxHkP4g260O1m9jpuklsUSIpYypq7TStCRy0jzK1-XQCxQGfucSOAM9PfoPUELTgIrerdkk4BGYkt1scD4388lglNEno9m__sSZ2p8OnJEI6F6n7YDTlIMkNgLWvBJGC344Yqn0qW2Jd9_Cly_h_rUtphIVGWRTluIAzNYRnRxbyh_XBV2PueVfypRXZ5IU5BqkMnxtFktyWphlSuULxZ5wQqP4_qd-jSk2gJzBcritmkOB_4crG0Col9V1sZkLQ",
  "refresh_token": "yFUT9LKACgDHZv3QCe0HHPuKZo4ute4UqETyudp5K8RIALHl73OdMVhTTWErj5GY2NADmbvBAmpftA7BaZbcYXlnACPEjlPzDiITiU0Egb3zaIkkgfUzYtZmvzSe89OjdFIp3KfOsQ1vwW6i5nIVJxZI8D0K0ceCi1HjMTTyqdvouMsTXLHxboCV8PQPANDUXFRVGaJT9zAsRcWXPu01fbbK1SyNxdZG0YGxOwSun9vf8nw2F3C6zqvSAsXnf8AAKqMVv9eHG1ApOtJVr33qw4WuGz7VJGtulk3wmv98kjuU7xXXciQsnoDffKf9NX8tIXNX0chKQOueV6SR8EH1QJVdWKdjDoYIMH9WTDUxiYLl3PgZPpiGL7AC0j7h4dJbCBmbsj9rYC0i5RtDt7FVzHjSL0MYnwZgHuZM1BnrDZEBVGV1uPkGTuY6t4HZ9qn0Ft4vmGgrBDPkdafrasc3FluYez6jZP8lxtwIQ9RdbylzcGC73JZioTFjT8gzs6ABCd1B8c25ag3JzGix3NqbSDmJAT1tKriulKW2ayh3HwW8SBEgvltzgGSUwfjwDA1QW0RbtLeloPXLfES0Dgbz7xiTqu3DKQUPFWACq1pI7Bn3GMB5FvHp3vg1kIOxldoGPd5mctVVZ6L0anwQZLQzhhufZrVBXomf9kH3AEPbIVl3okIdXcEJF5kpy7jTAZ5mrtX1gf6Fq6tdXJ2PiMxK7Lhcfg59UZCzpU3KoN32VQrstHiC5uF9xFHu0notip58P0T7hcrOBLjpOePHguk8jeRR4dIgsBXKASia7Dl4TSDYhPMNbvqpG4SYO54xbW5zLjxb7IMXs2aKebtJnq5TuoTubUnInhJUSWvhG6PZgy3t6wB1AFfJwD82yH5VBgr47tokNdlX9e3R9gwkyeeZnq8fIgiaPR1SqvkjEzJRzfFPYHWck9Lbd2xgNK83SDQZCn6338G16kBqa5iH58JcgrsMjvtsKiaLoORRgqqzxWRb7N9dfyVqDRujtghy56al83DhEc9IW70caT3df346QqY9bHOno8R7IeMpu31DJhg4Bh31kVUvA7UUXGL7HSMpVt2jYKNQsG1XXdmYIpCyuP5n9NAgxwmMyT53u7DcnsSoKUezxDwFKiJtnh0W3OpBCvvKHmL9EPEnR3ByODdplGITSOAIkxh9uz2qHWyB8CKwTzLr68wkqcoOPARlBvHTgQ0SowMUxY5iSFEdEqndv8ZcgzXa0i4P5UxqLrLNGMd0qVOmN2Rikdia6EhqVpwW39TBjbX74moZNO1QA1IBQdBebH0ZO0eci7DgRI7dJDmGvlHlKnm4e6CYGSfxRgoGtvN460vputrwISJbIxkFJR6XXdjmHK4ubrwFo1yoBOnm4ehyG0UnEObH8VMUFuUNpp1MC1UUiORmNwCcJZ3thuleI3ZNFjn9fTyx7nb4kXg4sXk8BbZZvqRVv0gsijrrqCK0Gf9B3BYuyRUq0FlYvQoZmsxF",
  "scope": "given_name family_name birth_date uprn organisationName departmentName subBuildingName buildingNumber buildingName dependentStreetName streetName doubleDependentAddressLocality dependentAddressLocality addressLocality postalCode gpg-45-medium openid",
  "id_token": "eyJ0eXAiOiJhdCtqd3QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlNIQS0yNTYifQ.eyJzdWIiOiJkMWViNDBmOS0xZDlmLTRlOTItYjJhOC01ZTQwYzgwMGI1ODIiLCJhdWQiOiJzb21lQ2xpZW50SWQiLCJpc3MiOiJodHRwczovL2F1dGh6LnN3YW4uc2lnbi1pbi5zZXJ2aWNlLmdvdi5zY290IiwiZXhwIjoxNjcxODAzMzIyLCJpYXQiOjE2NzE4MDI0MjIsIm5vbmNlIjoiODg5YmU4NjQtYzUyZi00ZWE0LTg3MzEtOTc1MjNhMzEzMjBkIiwianRpIjoiNmI1ZTU0YmMtMGViOS00NGUxLWE5OTgtMjYwM2Q4MTg2ZmYyIiwic2lkIjoiU0lEIn0.lLxz4-FuLaS-n5NC3xAr5_xOcUupVw5do4DC5ia3c3gJgE7ieoRxuS6uo2qK_MyjdkUdAOSERA15EKSD9bDpYxPzNpv39MQolA8t2mvlxsW2-pDve1rWbrr9KJXDcbOwhln0Tu9EHCd50c2zNfhC5xyLj1CTCFpUOJc9iBykv6dsLCdIKCaBWidRY0xGKo8gShkE7sUBAJhnHYWJA_cHq2pRFrIutP-vkHoe59rnpeuB08BJ4PK7EjNlCvV_22AiLJfiiokHpgQsPT0WyVSehCFZ-wiUKbtyRqHqLaIAjkdJsgR3UqPaV7qcaV7lF2ctwC2qXCzdIi_IDPdcUwWvKQ",
  "token_type": "Bearer",
  "expires_in": 900
}
Errors - Request for Token

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.

If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:
HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"     
}

The table below has information on the error types you may encounter.

401
	

access_denied
	

Access_denied: Token not valid

402
	

N/A
	

N/A

 
	

invalid_session_id
	

Not found: Invalid SID or expired session

403
	

access_denied
	

 Access_denied: Token not valid

404
	

not_found
	

 Not Found: Page not found

500
	

internal_server_error
	

 

501
	

N/A
	

N/A

502
	

bad_gateway
	

bad_gateway

503
	

internal_server_error
	

internal_server_error : Internl Error. Please Retry
Step 13 - Verify Code_Challenge

The token end point verifies that the auth_code and code_challenge are valid.
Step 14 - Return Tokens

The token end point returns the following information:

    id_token

    access_token

    refresh_token

Our access_token is valid for 15 mins
Step 15 - Check Signature

ScotAccount recommends that the relying party verify the signatures of the tokens received using the latest configuration from the Discovery End Point and the JWKS End Point.
Step 16 - Get Results

To view Verified Attribute Data the user needs to have completed the identity verification journey, using the scopes=openid&gpg-45-medium.

Then you will be able to make a GET request to /attributes/values using the access token returned from the token endpoint in the previous step and a private_key_jwt client assertion authentication method.
Request - Get Verified Attribute Data
GET "https://issuer.main.integration.scotaccount.service.gov.scot/attributes/values"
Headers:
    Authorization: "Bearer YOUR_ACCESS_TOKEN"
    DIS-Client-Assertion: "YOUR_ASSERTION"
Parameters - Get Verified Attribute Data

Parameter

Type

Description

Header

Authorization: "Bearer ****”
	

Required
	

Access_Token you received from the /token endpoint

Header

DIS-Client-Assertion: "****”
	

Required
	

This will be a JWT signed by the RP's private key. Info to help construct the JWT can be found in Make Authentication Requests with Auth Code Flow 

Response - Get Verified Attribute Data
{
  "claimsToken": "eyJraWQiOiJkTVZEIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXJpZmllZF9jbGFpbXMiOnsidmVyaWZpY2F0aW9uIjp7Im91dGNvbWUiOiJmMmNmZTBlMS02ZmJlLTRjYjYtOWU4ZC0xYzFmMTQyN2NjMmEgVkVSSUZJRUQgU1VDQ0VTU0ZVTExZIiwidHJ1c3RfZnJhbWV3b3JrIjoidWtfdGZpZGEiLCJhc3N1cmFuY2VfbGV2ZWwiOiJHUEc0NS1NZWRpdW0iLCJ0aW1lIjoiMjAyMy0wMi0xNVQxNjozOVoiLCJ2ZXJpZmllciI6eyJvcmdhbml6YXRpb24iOiJESVMiLCJ0eG4iOiJhNGRiZTg3Ny1kZjYzLTQ2MDgtOTViMC0zYTdmZTNhNGQ3NTEifX19LCJjbGFpbXMiOnsidXVpZCI6ImYyY2ZlMGUxLTZmYmUtNGNiNi05ZThkLTFjMWYxNDI3Y2MyYSIsImdpdmVuX25hbWUiOiJzYW1wbGVfZ2l2ZW5fbmFtZSIsImZhbWlseV9uYW1lIjoic2FtcGxlX2ZhbWlsaXlfbmFtZSIsImJpcnRoX2RhdGUiOiIxOTkwLTA5LTA4IiwiYWRkcmVzcyI6eyJ1cHJuIjoiOTA2NzAwMDgxNzU5Iiwic3ViQnVpbGRpbmdOYW1lIjoiMC8yIiwiYnVpbGRpbmdOdW1iZXIiOiI5OSIsInN0cmVldE5hbWUiOiJzYW1wbGVfc3RyZWV0X25hbWUiLCJhZGRyZXNzTG9jYWxpdHkiOiJzYW1wbGVfbG9jYWx0aW9uIiwicG9zdGFsQ29kZSI6IlgxMTFYWCJ9fX0="
}

 
Errors - Get Verified Attribute Data

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an error and an error_description which will provide you with information.

If the token request is invalid or unauthorised, you’ll receive an error response with the Content-Type of application/json, for example:
HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"     
}

The table below has information on the error types you may encounter.

401
	

access_denied
	

returned if the request is malformed in some way

402
	

N/A
	

N/A

 
	

invalid_session_id
	

Not found: Invalid SID or expired session

403
	

access_denied
	

 returned if assertion or access token is wrong.

404
	

not_found
	

 returned if there is no data for that user

500
	

internal_server_error
	

 if something has gone wrong with internal side.

501
	

N/A
	

N/A

502
	

bad_gateway
	

 if something has gone wrong with internal side.

503
	

internal_server_error
	

 if something has gone wrong with internal side.
Step 17 - Verify Access Token and Private_JWT

The Verified Data End Point verifies that both the access_token and private_jwt are correct and valid.
Step 18 - Send results JWT

Return to the Relying Party's application a signed JWT with verified claims of the end user.
Step 19 - Check signature of results

ScotAccount recommends that the Relying Party verify the signatures of the token received using the latest configuration from the Discovery End Point and the JWKS End Point.
Step 20 - Verify “sub” field in results

ScotAccount recommends that the Relying Party verifies that the correct valid user details are given, by checking the “sub” field matches the initial request sent.

 

For further detail about the responses you will receive, see: 




Managing your users session

Owned by Wallace T (Tom)
Last updated: Nov 28, 2024 by McNabb D (David)
Overview

ScotAccount’s user session timeout duration is 4 hours. You must also set up the functionality to log users out of a ScotAccount session. To log users out of ScotAccount, you need to call the /logout endpoint:

    Log your user out of your application - the way you do this will depend on how you have built your service.

    In the user’s browser, make a GET request to ScotAccount’s /logout endpoint to end your user’s session.

Request - Request for Logout
HTTP/1.1 
Location: https://authz.scotaccount.service.gov.scot/authorize/logout?
id_token_hint=eyJraWQiOiIxZTlnZGs3I...
&post_logout_redirect_uri=http://example-service.com/my-logout-url
&state=sadk8d4--lda%d
Parameters - Request for Logout

Parameter

Type

Description

Parameter

Type

Description

id_token_hint
	

Required
	

This is the ID token ScotAccount previously issued when you made a request to the /token endpoint for your user’s current session.

post_logout_redirect_uri
	

Required
	

You can only use this parameter if you have specified an id_token_hint.
This parameter is the URL you want to redirect your users to after you have logged them out.
The post_logout_redirect_uri must match the logout URI you specified when you registered.

state
	

Recommended
	

You can use this query parameter to maintain state between the logout request and your user being redirected to the post_logout_redirect_uri.
Response - Request for Logout
HTTP 1.1 302 Found
Location: https://example-service.com/my-logout-url&state=sadk8d4--lda%d

You have now logged your user out of ScotAccount and terminated their session.

 

This code example uses formatting that makes it easier to read. If you copy the example, you must make sure the request is:

    a continuous line of text separating each parameter with an ampersand (&)

    not split across multiple lines

    without any additional separators such as newline, commas or tabs

 
Understanding Responses - more info

Owned by Wallace T (Tom)
Last updated: Jul 09, 2025

The following pages describe the responses. These fall into the following categories:

OIDC Tokens - ID Token and Access Token  

Verified Attributes  

 

 
OIDC Tokens - ID Token and Access Token

Owned by Wallace T (Tom)
Last updated: Jun 13, 2025

The following explains the tokens return from the /token endpoint used in the OIDC flow.
Understanding the response for token

Example Response
{
  "access_token": "eyJraWQiOiJXZ2lHIiwidHlwIjoiYXQrand0IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0ZjY4OTNmNC02ZmJlLTQyM2UtYTVjYy1kM2M5M2U1YTdjNDEiLCJzY3AiOlsib3BlbmlkIl0sImlzcyI6Imh0dHBzOi8vYXV0aHouc3dhbi5zaWduLWluLnNlcnZpY2UuZ292LnNjb3QiLCJleHAiOjE2Nzg5MzI2NjIsImlhdCI6MTY3ODkzMTc2MiwianRpIjoiekY4Q1VQRC10ZVkiLCJjaWQiOiI1eWh5Z2tzY3R3cHFnIn0.LiE0ocHRkXNINwwxol4XrKqYMuafZ2-gSP1S2huPam-anV9uxMxvbm7W6pvWe8n2mOUsxFDQVNgVP8OuoFuMj-nhWvm5ZornnACmHS1g0MkECOabQmnYrmqcWJesYvrlMRccrie20ZM34_wALQYL2xgtKNBBaUaD6rTmjiKU3TGgX2q7b71A72YqA9stxQjBocjjWcJuXHrbt_qmyuiS2SVniRvmOXnukpiGPLIBZshJGm3SpZiAknfrlo7EQCQUru9NHuj9DYf1wxoRYzZh8nYLXvAm7lzxkVvH1AhhHoj2TAF6YXvMOZPRC7PSrc9hOxYz3xJkOZnQmfyucyh8-Q",
  "refresh_token": "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..vnC6Aa6eIzxwHxP1eIk2rA.4or8EM0wJZfj0-w3YfjK-pz97Iysa57njT7UDuGJKa3TkFxgs1sCws9zWfYjuEK7KU_j8spLc50ngaSGQaqq23z2T-suL-B0JC949Exl_-48zPEBiQCqsBEKo338973xMm7_Arvp86aQQDQ7i5KTSd05vXqA7YCW7WCEgIG1k93JPsY0pp70NSBqPP-wpCu914yPkXTvQlte5TbyoVpH89mafQg4oyfvzQT2NBtMOC_LoeOImSOKuD0dLCNmgrsXn5CrcXLfquk8bTR283G2qE9AguphWGjm3hWIqVhXuCgZo7AsBkPxbsnt0oIQ7UuD3ZH_n7qRagiC9rOuBdYgmNaYfAYRtpEujVXB8GnwMniSgn0iyB8-tf-x3Gs8ihQe8x-dwOXwMMrXXrM11Wnevh2ZOr8TQoh4f_JHXmy7OdvcqaRTa2JzEre9gy1vSevkK6lPbCV1IeD1oIPkJk3A7FKNrWlVS5w0uJa1KaItVrQtrFrhgMHwGIqkVcWNQ-ZEnvRCRqoFzt812m6jUHchpxlFHFiiQ58kfIl6UyH9_vc8pSONMxQbgoBJftLKR0JqxHU3pTpmIjPupLxMl3YMDIdLGPmemK8pmPbHB9zvCq4eR7HiiYsb5JweBxOUaPlNCdkjj1MT30q56tldEoila_mk5V75Dj3U5EhqpRlyFYTLSzPHRjBnjlrGTb8FqZ6zSNC8JZ_U4q2LWkJge4RT2riOIC1yLmfy2K1NflNKi99P5CGzuzmavX3Yv9usqK_3CKnTPOAbtIR9lJO4eBz6uxsaB7JTp_ASxhG96OIkuupph4OvLuPVX8vX6f0i05Ay5Xa0b2-7WBR-i9m7VjUoFUCH4m2HwSzp30oOmQw_n0nT7tM_1_mXDd95StbKavkb9Yjdzg6BVA5Ux9eKU-WrF05rB9YLT5u1E4M3cNA7XCpvR935O1Hty-Z7_U58MGG2SPYKlquTjtHPV4v7Kb3M_Astr8OzDiR3Rw4q59Xd8Ak.Y4pYS8iU7Jft6ay6yywpig",
  "scope": "openid",
  "id_token": "eyJraWQiOiJXZ2lHIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0ZjY4OTNmNC02ZmJlLTQyM2UtYTVjYy1kM2M5M2U1YTdjNDEiLCJhdWQiOiI1eWh5Z2tzY3R3cHFnIiwiaXNzIjoiaHR0cHM6Ly9hdXRoei5zd2FuLnNpZ24taW4uc2VydmljZS5nb3Yuc2NvdCIsImV4cCI6MTY3ODkzMjY2MiwiaWF0IjoxNjc4OTMxNzYyLCJub25jZSI6IkJkSExEV1BSbVk4V0JZTjZCRXRGZkkyUlZvSm15Q1JwcEdGSXQyaEd5N0EiLCJqdGkiOiJmUF9XXzJ3NjVpVSIsInNpZCI6Inl4WjJWcE9ueWRWMENUOGoxU2JsZnp0UllEcmtxLVNKM09IN2VqRjdHUWcifQ.db79iKccqKkXF4MF2IThOV05AZHrlvmNZWAW5ojUzyQoKzHSlPtCEeC3sqwsah84gHMqU0A9ACWPbE8SECdpzOvL6QVCfoWjwuiMEzMsOZvCHccMEpeNX8rbB7_L5Mo5lLOpVl80jIezKNQJ8NMQoOgMGaBm5qkgLTVFuYqVnvpzAEb44xDeSYe7__jaXOUBiGIWMqopeqJRmR1cy5yJ9ShqDa_xoBVmAxXXXv0ZOanE7E7-LCBApdvFNRA-JUUrjMIYUNn8cSkupye6bjLElLT_qPKJc6N0mSOhH43oU5GB-heMhNX18p-07J5pFFAHotcP6VsA2mE7y96gLQ1XrA",
  "token_type": "Bearer",
  "expires_in": 900
}

You can use the following table to understand the ID Token’s claims.

Claim

Description

access_token
	

Access tokens are used in token-based authentication to allow an application to access an API.

refresh_token
	

A refresh token is a mechanism to receive a new access token when the old one expires

scope
	

Scope is a mechanism in OAuth 2.0 to limit an application's access to a user's account

id_token
	

ID tokens are used in token-based authentication to cache user profile information and provide it to a client application

token_type
	

The type of token this is, typically just the string “Bearer”.

expires_in
	

The time the token is valid for.
Understanding the ID Token

A id_token is return to the user after successful authentication has happened.

Example Token
eyJraWQiOiJXZ2lHIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0ZjY4OTNmNC02ZmJlLTQyM2UtYTVjYy1kM2M5M2U1YTdjNDEiLCJhdWQiOiIyZnM0NmpvdjNjbTRhIiwiaXNzIjoiaHR0cHM6Ly9hdXRoei5zd2FuLnNpZ24taW4uc2VydmljZS5nb3Yuc2NvdCIsImV4cCI6MTY3Njc3NTkwOSwiaWF0IjoxNjc2Nzc1MDA5LCJub25jZSI6IjIwM0pzTm9fMExqejBUVl9LZkZPQUFINm55bV9aYWlRempvZHZhcGVfR00iLCJqdGkiOiJqSkgzd3N0TWJ1cyIsInNpZCI6IlNiOGdwbkQ5MGhUS3hQOGZIRWRhYVFmRTdhSUhzREJHWXYzYjhZMW1KckUifQ.UZX9LFhTfwTwT-bnVMcbvG2KRFCBfdz6oVPPf1aP2eNKC9YKMKgH2jb7DCbdOdNNVaNGayADSwMA9DJhCN1Qa8KvdbGK79AR2N4jxfGFzIdS4FkLlTIRp5oX2J8PWKnqc_Z4dC-D70rffQVokic1LxHQInxtz3n21_TPhxwOwbBRKBMbDpnoL-5qERg10MsBDaJJdctjoa8h6AGE6sJF-GZQhEVaHx-ESut0E0Ul18Tgfklx-evRjAHBxoJfh98m3d4obV_7FKu79_qMM1TOx3T3EaJMlBsYP6munM-jZR9-Z9VBEg2UaLx4XWBCAsV6Wvn2jFuSRpDwL2hhuRKE6A

Example Token - Decoded by 
{
  "sub": "4f6893f4-6fbe-423e-a5cc-d3c93e5a7c41",
  "aud": "2fs46jov3cm4a",
  "iss": "https://authz.integration.scotaccount.service.gov.scot",
  "exp": 1676775909,
  "iat": 1676775009,
  "nonce": "203JsNo_0Ljz0TV_KfFOAAH6nym_ZaiQzjodvape_GM",
  "jti": "jJH3wstMbus",
  "sid": "Sb8gpnD90hTKxP8fHEdaaQfE7aIHsDBGYv3b8Y1mJrE"
}

 

NOTE: ScotAccount does not supply any personal information, as part of the Authentication process.

We only provide a UUID as part of the “sub” claim that is immutable and can be used as a reference point. We do NOT provide e.g. email address or mobile no as part of the Authentication process.

You can use the following table to understand the ID Token’s claims.

Claim

Description

sub
	

The subject identifier or the unique ID of a user (UUID).

aud
	

The audience, which will be the client_id you were assigned during onboarding.

iss
	

The ScotAccount OpenID Provider’s Issue identifier as specified in the discovery endpoint.

exp
	

exp means ‘expiration time’. This is the expiration time for this token, which will be an integer timestamp representing the number of seconds since the Unix Epoch.

iat
	

iat stands for ‘issued at’. This identifies the time at which ScotAccount created the JWT. You can use this claim to understand the age of the JWT.
This will appear as an integer timestamp representing the number of seconds since the Unix Epoch.

nonce
	

The nonce value your application provided when you made the authorisation request.

jti
	

The "jti" (JWT ID) claim provides a unique identifier for the JWT

sid
	

sid claim is defined in Front-Channel Logout 1.0 is for its use as a parameter for frontchannel_logout_uri
Understanding the Access Token

A access_token is return to the user after they make a call to /token end point.

Example Access Token
eyJraWQiOiJXZ2lHIiwidHlwIjoiYXQrand0IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiI0ZjY4OTNmNC02ZmJlLTQyM2UtYTVjYy1kM2M5M2U1YTdjNDEiLCJzY3AiOlsib3BlbmlkIl0sImlzcyI6Imh0dHBzOi8vYXV0aHouc3dhbi5zaWduLWluLnNlcnZpY2UuZ292LnNjb3QiLCJleHAiOjE2NzY3NzU5MTAsImlhdCI6MTY3Njc3NTAxMCwianRpIjoicm9UekozM1RGZTgiLCJjaWQiOiIyZnM0NmpvdjNjbTRhIn0.fZtNE4GJRtYopKrHO4-Jau8lrNB5PyS0uz73gNlIH25aik9bNHX59PfNgnPdlgKF_LZFJmJFk7KytDldx21B1KIjseZwjprVQ0G_0crQ2rx8zdkig1bewggT-zsDxl0mpK05ERfmxeXdAL-entluGLtqqDmyXVF4C8ortKeWeNVwa0GgkA4mLunE4vQzQtJ_nBr3_D8Lq7OBScd-3iloj8tiKoKn0VQRctrUwc5IBfgV7DaPDBdqP1-tez1bzcb5l62ext43AaLwcuWEBlev1rHqqGbedx0Orrq8XMAftjna0Qa0mka_J2QdVYxbIbIZbTddrjIMgratJcj8dFU3Ww

Example Access Token - Decoded by jwt.io
{
  "sub": "4f6893f4-6fbe-423e-a5cc-d3c93e5a7c41",
  "scp": [ "openid" ],
  "iss": "https://authz.integration.scotaccount.service.gov.scot",
  "exp": 1676775910,
  "iat": 1676775010,
  "jti": "roTzJ33TFe8",
  "cid": "2fs46jov3cm4a"
}

You can use the following table to understand the access token’s claims

Claim

Description

sub
	

The subject identifier or the unique ID of a user (UUID).

scp
	

Lists the scopes that have been consented for release by our Attribute Server.

iss
	

The ScotAccount OpenID Provider’s Issue identifier as specified in the discovery endpoint.

exp
	

exp means ‘expiration time’. This is the expiration time for this token, which will be an integer timestamp representing the number of seconds since the Unix Epoch.

iat
	

iat stands for ‘issued at’. This identifies the time at which ScotAccount created the JWT. You can use this claim to understand the age of the JWT.
This will appear as an integer timestamp representing the number of seconds since the Unix Epoch.

jti
	

jti stands for ‘JWT ID’ and it’s a unique identifier that can prevent the token being reused.

cid
	

Client identifier of the OIDC client that requested this token, this will be the Client ID assigned to you during onboarding.



Verified Attributes

Owned by Wallace T (Tom)
Last updated: Jul 09, 2025
Introduction .

As described in  Make requests for Verified Attributes Flow  verified attributes are requested via OIDC scopes in an auth code flow. The Technical - Overview  provides a high level description of the verified attributes an extract of which is in the following table.

 

Verified attribute

Scope

Verification Method

Description

identity 

 
	

scotaccount.gpg45.medium
	

gpg45 medium

 
	

This scope provides the outcome of the identity verification process. This can either be “verified” with the identity attribute consisting of a name and DOB bound to the Sub (UUID) or “unverified” where the user has completed but not been verified through the gpg45 process. Further details are provided in the ScotAccount data schema  .

address

 
	

scotaccount.address
	

Claimed address checked against credit reference records. 
	

This scope provides a verified address. Further details are provided in the ScotAccount data schema .

 

scotaccount.email

 
	

scotaccount.email
	

Verified by ScotAccount at sign up/ account creation. 
	

This scope provides a verified email address. Further details are provided in the ScotAccount data schema  .

 
Overview of the verified attributes process.

Each attribute is requested via an OIDC scope in the auth code flow. ScotAccount will endeavour to return as many of the requested verified attributes (scopes/claims) as it is able. For various reason it may not be able to return all of the requested attributes. 

As explained in Make requests for Verified Attributes Flow  an access token is issued by /token which is then presented to /attributes and a response jwt is issued with the attribute payload.  The schema of the response jwt is described in ScotAccount data schema  . 

When a scope is requested, either data is provided in the response jwt or no data is provided for that specific attribute/scope. The response jwt contains an array of the verified attributes (verified_claims) that scotaccount was able to  provide. So for example, 3 scopes could be requested but between 0 and 3 returned in the array. The jwt fields containing the subject id (uuid) will always be present in the jwt response. 
The structure of a verified attribute.

 

The structure of response jwt is described in the diagram below. In this case there is an array on one verified attribute (scotaccount.gpg45.medium) contained within the jwt.

How to Test

Owned by Wallace T (Tom)
Last updated: Aug 30, 2024
Overview

We provide the following features:

    Manual Testing

    Automated Testing

Manual Testing

We provide a Demo Relying Party application, that you can manually use to test:

    Authentication

    Requesting verified attributes

It can be accessed from the link https://oidc-private-client.integration.scotaccount.service.gov.scot/integration
Automated Testing - Mock Service

We provide a Mock Service that can be used to test:

    Authentication

    Requesting verified attributes

This provides an easy way to test ScotAccount’s capabilities without having to supply real information or documentation such as name / address / copies of documents such as passport re idv.

It can be accessed from the link https://mock-dis.main.integration.scotaccount.service.gov.scot/v2/ or

Demo RP pointing to Mock DIS V2 : 

https://oidc-private-client.integration.scotaccount.service.gov.scot/mock-dis/v2/

NOTE: There are a few points to note and differences to remember. 

    Value of code_challenge isn't validated

    Value of client_id isn't validated

    Prompt & nonce are out of scope for the mock and therefore ignored

    Value of code_verifier isn't validated

    Value of sub & iss (client_id) and aud in the JWT aren't validated

    Value of sub & iss (client_id) and aud in the DIS-Client-Assertion aren't validated

 